
Scheduler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001634  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00001634  000016c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000037  00800086  00800086  000016ee  2**0
                  ALLOC
  3 .stab         00001b78  00000000  00000000  000016f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010c3  00000000  00000000  00003268  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3b       	cpi	r26, 0xBD	; 189
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a7 09 	call	0x134e	; 0x134e <main>
      8a:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <OS_voidNewTask>:
	}
}
*/

void OS_voidNewTask(TaskNode * Copy_StrTask)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <OS_voidNewTask+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <OS_voidNewTask+0x8>
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	9c 83       	std	Y+4, r25	; 0x04
      a0:	8b 83       	std	Y+3, r24	; 0x03
	node * Link;
	
	static u32 NID = 0;
	if (Head == NULL)
      a2:	80 91 88 00 	lds	r24, 0x0088
      a6:	90 91 89 00 	lds	r25, 0x0089
      aa:	00 97       	sbiw	r24, 0x00	; 0
      ac:	09 f0       	breq	.+2      	; 0xb0 <OS_voidNewTask+0x1e>
      ae:	bf c0       	rjmp	.+382    	; 0x22e <OS_voidNewTask+0x19c>
	{
		Head = (node*) malloc(sizeof(node));
      b0:	8b e1       	ldi	r24, 0x1B	; 27
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	0e 94 13 0a 	call	0x1426	; 0x1426 <malloc>
      b8:	90 93 89 00 	sts	0x0089, r25
      bc:	80 93 88 00 	sts	0x0088, r24

		Head -> Task.periodicity = Copy_StrTask -> periodicity;
      c0:	20 91 88 00 	lds	r18, 0x0088
      c4:	30 91 89 00 	lds	r19, 0x0089
      c8:	eb 81       	ldd	r30, Y+3	; 0x03
      ca:	fc 81       	ldd	r31, Y+4	; 0x04
      cc:	84 81       	ldd	r24, Z+4	; 0x04
      ce:	95 81       	ldd	r25, Z+5	; 0x05
      d0:	a6 81       	ldd	r26, Z+6	; 0x06
      d2:	b7 81       	ldd	r27, Z+7	; 0x07
      d4:	f9 01       	movw	r30, r18
      d6:	84 83       	std	Z+4, r24	; 0x04
      d8:	95 83       	std	Z+5, r25	; 0x05
      da:	a6 83       	std	Z+6, r26	; 0x06
      dc:	b7 83       	std	Z+7, r27	; 0x07
		Head -> Task.periority = Copy_StrTask -> periority;
      de:	20 91 88 00 	lds	r18, 0x0088
      e2:	30 91 89 00 	lds	r19, 0x0089
      e6:	eb 81       	ldd	r30, Y+3	; 0x03
      e8:	fc 81       	ldd	r31, Y+4	; 0x04
      ea:	80 85       	ldd	r24, Z+8	; 0x08
      ec:	91 85       	ldd	r25, Z+9	; 0x09
      ee:	a2 85       	ldd	r26, Z+10	; 0x0a
      f0:	b3 85       	ldd	r27, Z+11	; 0x0b
      f2:	f9 01       	movw	r30, r18
      f4:	80 87       	std	Z+8, r24	; 0x08
      f6:	91 87       	std	Z+9, r25	; 0x09
      f8:	a2 87       	std	Z+10, r26	; 0x0a
      fa:	b3 87       	std	Z+11, r27	; 0x0b
		Head -> Task.startTime = Copy_StrTask -> startTime;
      fc:	20 91 88 00 	lds	r18, 0x0088
     100:	30 91 89 00 	lds	r19, 0x0089
     104:	eb 81       	ldd	r30, Y+3	; 0x03
     106:	fc 81       	ldd	r31, Y+4	; 0x04
     108:	80 89       	ldd	r24, Z+16	; 0x10
     10a:	91 89       	ldd	r25, Z+17	; 0x11
     10c:	a2 89       	ldd	r26, Z+18	; 0x12
     10e:	b3 89       	ldd	r27, Z+19	; 0x13
     110:	f9 01       	movw	r30, r18
     112:	80 8b       	std	Z+16, r24	; 0x10
     114:	91 8b       	std	Z+17, r25	; 0x11
     116:	a2 8b       	std	Z+18, r26	; 0x12
     118:	b3 8b       	std	Z+19, r27	; 0x13
		Head -> Task.DesiredDelayTime = Copy_StrTask -> DesiredDelayTime;
     11a:	20 91 88 00 	lds	r18, 0x0088
     11e:	30 91 89 00 	lds	r19, 0x0089
     122:	eb 81       	ldd	r30, Y+3	; 0x03
     124:	fc 81       	ldd	r31, Y+4	; 0x04
     126:	84 85       	ldd	r24, Z+12	; 0x0c
     128:	95 85       	ldd	r25, Z+13	; 0x0d
     12a:	a6 85       	ldd	r26, Z+14	; 0x0e
     12c:	b7 85       	ldd	r27, Z+15	; 0x0f
     12e:	f9 01       	movw	r30, r18
     130:	84 87       	std	Z+12, r24	; 0x0c
     132:	95 87       	std	Z+13, r25	; 0x0d
     134:	a6 87       	std	Z+14, r26	; 0x0e
     136:	b7 87       	std	Z+15, r27	; 0x0f
		Head -> Task.pToTask = Copy_StrTask -> pToTask;
     138:	a0 91 88 00 	lds	r26, 0x0088
     13c:	b0 91 89 00 	lds	r27, 0x0089
     140:	eb 81       	ldd	r30, Y+3	; 0x03
     142:	fc 81       	ldd	r31, Y+4	; 0x04
     144:	85 89       	ldd	r24, Z+21	; 0x15
     146:	96 89       	ldd	r25, Z+22	; 0x16
     148:	56 96       	adiw	r26, 0x16	; 22
     14a:	9c 93       	st	X, r25
     14c:	8e 93       	st	-X, r24
     14e:	55 97       	sbiw	r26, 0x15	; 21

		if (Copy_StrTask -> TaskAdd == 0)
     150:	eb 81       	ldd	r30, Y+3	; 0x03
     152:	fc 81       	ldd	r31, Y+4	; 0x04
     154:	84 89       	ldd	r24, Z+20	; 0x14
     156:	88 23       	and	r24, r24
     158:	f1 f4       	brne	.+60     	; 0x196 <OS_voidNewTask+0x104>
		{
			Head -> Task.uNID = 999999;
     15a:	e0 91 88 00 	lds	r30, 0x0088
     15e:	f0 91 89 00 	lds	r31, 0x0089
     162:	8f e3       	ldi	r24, 0x3F	; 63
     164:	92 e4       	ldi	r25, 0x42	; 66
     166:	af e0       	ldi	r26, 0x0F	; 15
     168:	b0 e0       	ldi	r27, 0x00	; 0
     16a:	80 83       	st	Z, r24
     16c:	91 83       	std	Z+1, r25	; 0x01
     16e:	a2 83       	std	Z+2, r26	; 0x02
     170:	b3 83       	std	Z+3, r27	; 0x03
			Head -> Task.periority = 999999;
     172:	e0 91 88 00 	lds	r30, 0x0088
     176:	f0 91 89 00 	lds	r31, 0x0089
     17a:	8f e3       	ldi	r24, 0x3F	; 63
     17c:	92 e4       	ldi	r25, 0x42	; 66
     17e:	af e0       	ldi	r26, 0x0F	; 15
     180:	b0 e0       	ldi	r27, 0x00	; 0
     182:	80 87       	std	Z+8, r24	; 0x08
     184:	91 87       	std	Z+9, r25	; 0x09
     186:	a2 87       	std	Z+10, r26	; 0x0a
     188:	b3 87       	std	Z+11, r27	; 0x0b
			Head -> Task.TaskAdd = 0;
     18a:	e0 91 88 00 	lds	r30, 0x0088
     18e:	f0 91 89 00 	lds	r31, 0x0089
     192:	14 8a       	std	Z+20, r1	; 0x14
     194:	2e c0       	rjmp	.+92     	; 0x1f2 <OS_voidNewTask+0x160>
		}
		else if (Copy_StrTask -> TaskAdd == 1)
     196:	eb 81       	ldd	r30, Y+3	; 0x03
     198:	fc 81       	ldd	r31, Y+4	; 0x04
     19a:	84 89       	ldd	r24, Z+20	; 0x14
     19c:	81 30       	cpi	r24, 0x01	; 1
     19e:	49 f5       	brne	.+82     	; 0x1f2 <OS_voidNewTask+0x160>
		{
			Head -> Task.uNID = NID;
     1a0:	e0 91 88 00 	lds	r30, 0x0088
     1a4:	f0 91 89 00 	lds	r31, 0x0089
     1a8:	80 91 8e 00 	lds	r24, 0x008E
     1ac:	90 91 8f 00 	lds	r25, 0x008F
     1b0:	a0 91 90 00 	lds	r26, 0x0090
     1b4:	b0 91 91 00 	lds	r27, 0x0091
     1b8:	80 83       	st	Z, r24
     1ba:	91 83       	std	Z+1, r25	; 0x01
     1bc:	a2 83       	std	Z+2, r26	; 0x02
     1be:	b3 83       	std	Z+3, r27	; 0x03
			Head -> Task.TaskAdd = 1;
     1c0:	e0 91 88 00 	lds	r30, 0x0088
     1c4:	f0 91 89 00 	lds	r31, 0x0089
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	84 8b       	std	Z+20, r24	; 0x14
			NID++;
     1cc:	80 91 8e 00 	lds	r24, 0x008E
     1d0:	90 91 8f 00 	lds	r25, 0x008F
     1d4:	a0 91 90 00 	lds	r26, 0x0090
     1d8:	b0 91 91 00 	lds	r27, 0x0091
     1dc:	01 96       	adiw	r24, 0x01	; 1
     1de:	a1 1d       	adc	r26, r1
     1e0:	b1 1d       	adc	r27, r1
     1e2:	80 93 8e 00 	sts	0x008E, r24
     1e6:	90 93 8f 00 	sts	0x008F, r25
     1ea:	a0 93 90 00 	sts	0x0090, r26
     1ee:	b0 93 91 00 	sts	0x0091, r27
		}

		Head -> Next = NULL;
     1f2:	e0 91 88 00 	lds	r30, 0x0088
     1f6:	f0 91 89 00 	lds	r31, 0x0089
     1fa:	10 8e       	std	Z+24, r1	; 0x18
     1fc:	17 8a       	std	Z+23, r1	; 0x17
		Head -> Prev = NULL;
     1fe:	e0 91 88 00 	lds	r30, 0x0088
     202:	f0 91 89 00 	lds	r31, 0x0089
     206:	12 8e       	std	Z+26, r1	; 0x1a
     208:	11 8e       	std	Z+25, r1	; 0x19
		Last = Head;
     20a:	80 91 88 00 	lds	r24, 0x0088
     20e:	90 91 89 00 	lds	r25, 0x0089
     212:	90 93 8d 00 	sts	0x008D, r25
     216:	80 93 8c 00 	sts	0x008C, r24
		Counter++;
     21a:	80 91 86 00 	lds	r24, 0x0086
     21e:	90 91 87 00 	lds	r25, 0x0087
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	90 93 87 00 	sts	0x0087, r25
     228:	80 93 86 00 	sts	0x0086, r24
     22c:	a8 c0       	rjmp	.+336    	; 0x37e <OS_voidNewTask+0x2ec>

	}
	else
	{			

		Link = (node*) malloc(sizeof(node));
     22e:	8b e1       	ldi	r24, 0x1B	; 27
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 13 0a 	call	0x1426	; 0x1426 <malloc>
     236:	9a 83       	std	Y+2, r25	; 0x02
     238:	89 83       	std	Y+1, r24	; 0x01

		Link -> Task.periodicity = Copy_StrTask -> periodicity;
     23a:	eb 81       	ldd	r30, Y+3	; 0x03
     23c:	fc 81       	ldd	r31, Y+4	; 0x04
     23e:	84 81       	ldd	r24, Z+4	; 0x04
     240:	95 81       	ldd	r25, Z+5	; 0x05
     242:	a6 81       	ldd	r26, Z+6	; 0x06
     244:	b7 81       	ldd	r27, Z+7	; 0x07
     246:	e9 81       	ldd	r30, Y+1	; 0x01
     248:	fa 81       	ldd	r31, Y+2	; 0x02
     24a:	84 83       	std	Z+4, r24	; 0x04
     24c:	95 83       	std	Z+5, r25	; 0x05
     24e:	a6 83       	std	Z+6, r26	; 0x06
     250:	b7 83       	std	Z+7, r27	; 0x07
		Link -> Task.periority = Copy_StrTask -> periority;
     252:	eb 81       	ldd	r30, Y+3	; 0x03
     254:	fc 81       	ldd	r31, Y+4	; 0x04
     256:	80 85       	ldd	r24, Z+8	; 0x08
     258:	91 85       	ldd	r25, Z+9	; 0x09
     25a:	a2 85       	ldd	r26, Z+10	; 0x0a
     25c:	b3 85       	ldd	r27, Z+11	; 0x0b
     25e:	e9 81       	ldd	r30, Y+1	; 0x01
     260:	fa 81       	ldd	r31, Y+2	; 0x02
     262:	80 87       	std	Z+8, r24	; 0x08
     264:	91 87       	std	Z+9, r25	; 0x09
     266:	a2 87       	std	Z+10, r26	; 0x0a
     268:	b3 87       	std	Z+11, r27	; 0x0b
		Link -> Task.startTime = Copy_StrTask -> startTime;
     26a:	eb 81       	ldd	r30, Y+3	; 0x03
     26c:	fc 81       	ldd	r31, Y+4	; 0x04
     26e:	80 89       	ldd	r24, Z+16	; 0x10
     270:	91 89       	ldd	r25, Z+17	; 0x11
     272:	a2 89       	ldd	r26, Z+18	; 0x12
     274:	b3 89       	ldd	r27, Z+19	; 0x13
     276:	e9 81       	ldd	r30, Y+1	; 0x01
     278:	fa 81       	ldd	r31, Y+2	; 0x02
     27a:	80 8b       	std	Z+16, r24	; 0x10
     27c:	91 8b       	std	Z+17, r25	; 0x11
     27e:	a2 8b       	std	Z+18, r26	; 0x12
     280:	b3 8b       	std	Z+19, r27	; 0x13
		Link -> Task.DesiredDelayTime = Copy_StrTask -> DesiredDelayTime;
     282:	eb 81       	ldd	r30, Y+3	; 0x03
     284:	fc 81       	ldd	r31, Y+4	; 0x04
     286:	84 85       	ldd	r24, Z+12	; 0x0c
     288:	95 85       	ldd	r25, Z+13	; 0x0d
     28a:	a6 85       	ldd	r26, Z+14	; 0x0e
     28c:	b7 85       	ldd	r27, Z+15	; 0x0f
     28e:	e9 81       	ldd	r30, Y+1	; 0x01
     290:	fa 81       	ldd	r31, Y+2	; 0x02
     292:	84 87       	std	Z+12, r24	; 0x0c
     294:	95 87       	std	Z+13, r25	; 0x0d
     296:	a6 87       	std	Z+14, r26	; 0x0e
     298:	b7 87       	std	Z+15, r27	; 0x0f
		Link -> Task.pToTask = Copy_StrTask -> pToTask;
     29a:	eb 81       	ldd	r30, Y+3	; 0x03
     29c:	fc 81       	ldd	r31, Y+4	; 0x04
     29e:	85 89       	ldd	r24, Z+21	; 0x15
     2a0:	96 89       	ldd	r25, Z+22	; 0x16
     2a2:	e9 81       	ldd	r30, Y+1	; 0x01
     2a4:	fa 81       	ldd	r31, Y+2	; 0x02
     2a6:	96 8b       	std	Z+22, r25	; 0x16
     2a8:	85 8b       	std	Z+21, r24	; 0x15


		if (Copy_StrTask -> TaskAdd == 0)
     2aa:	eb 81       	ldd	r30, Y+3	; 0x03
     2ac:	fc 81       	ldd	r31, Y+4	; 0x04
     2ae:	84 89       	ldd	r24, Z+20	; 0x14
     2b0:	88 23       	and	r24, r24
     2b2:	c1 f4       	brne	.+48     	; 0x2e4 <OS_voidNewTask+0x252>
		{
			Link -> Task.uNID = 999999;
     2b4:	e9 81       	ldd	r30, Y+1	; 0x01
     2b6:	fa 81       	ldd	r31, Y+2	; 0x02
     2b8:	8f e3       	ldi	r24, 0x3F	; 63
     2ba:	92 e4       	ldi	r25, 0x42	; 66
     2bc:	af e0       	ldi	r26, 0x0F	; 15
     2be:	b0 e0       	ldi	r27, 0x00	; 0
     2c0:	80 83       	st	Z, r24
     2c2:	91 83       	std	Z+1, r25	; 0x01
     2c4:	a2 83       	std	Z+2, r26	; 0x02
     2c6:	b3 83       	std	Z+3, r27	; 0x03
			Link -> Task.periority = 999999;
     2c8:	e9 81       	ldd	r30, Y+1	; 0x01
     2ca:	fa 81       	ldd	r31, Y+2	; 0x02
     2cc:	8f e3       	ldi	r24, 0x3F	; 63
     2ce:	92 e4       	ldi	r25, 0x42	; 66
     2d0:	af e0       	ldi	r26, 0x0F	; 15
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	80 87       	std	Z+8, r24	; 0x08
     2d6:	91 87       	std	Z+9, r25	; 0x09
     2d8:	a2 87       	std	Z+10, r26	; 0x0a
     2da:	b3 87       	std	Z+11, r27	; 0x0b
			Link -> Task.TaskAdd = 0;
     2dc:	e9 81       	ldd	r30, Y+1	; 0x01
     2de:	fa 81       	ldd	r31, Y+2	; 0x02
     2e0:	14 8a       	std	Z+20, r1	; 0x14
     2e2:	2a c0       	rjmp	.+84     	; 0x338 <OS_voidNewTask+0x2a6>
		}
		else if (Copy_StrTask -> TaskAdd == 1)
     2e4:	eb 81       	ldd	r30, Y+3	; 0x03
     2e6:	fc 81       	ldd	r31, Y+4	; 0x04
     2e8:	84 89       	ldd	r24, Z+20	; 0x14
     2ea:	81 30       	cpi	r24, 0x01	; 1
     2ec:	29 f5       	brne	.+74     	; 0x338 <OS_voidNewTask+0x2a6>
		{
			Link -> Task.uNID = NID;
     2ee:	80 91 8e 00 	lds	r24, 0x008E
     2f2:	90 91 8f 00 	lds	r25, 0x008F
     2f6:	a0 91 90 00 	lds	r26, 0x0090
     2fa:	b0 91 91 00 	lds	r27, 0x0091
     2fe:	e9 81       	ldd	r30, Y+1	; 0x01
     300:	fa 81       	ldd	r31, Y+2	; 0x02
     302:	80 83       	st	Z, r24
     304:	91 83       	std	Z+1, r25	; 0x01
     306:	a2 83       	std	Z+2, r26	; 0x02
     308:	b3 83       	std	Z+3, r27	; 0x03
			Link -> Task.TaskAdd = 1;
     30a:	e9 81       	ldd	r30, Y+1	; 0x01
     30c:	fa 81       	ldd	r31, Y+2	; 0x02
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	84 8b       	std	Z+20, r24	; 0x14
			NID++;
     312:	80 91 8e 00 	lds	r24, 0x008E
     316:	90 91 8f 00 	lds	r25, 0x008F
     31a:	a0 91 90 00 	lds	r26, 0x0090
     31e:	b0 91 91 00 	lds	r27, 0x0091
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	a1 1d       	adc	r26, r1
     326:	b1 1d       	adc	r27, r1
     328:	80 93 8e 00 	sts	0x008E, r24
     32c:	90 93 8f 00 	sts	0x008F, r25
     330:	a0 93 90 00 	sts	0x0090, r26
     334:	b0 93 91 00 	sts	0x0091, r27
		}

		Link -> Next = NULL;
     338:	e9 81       	ldd	r30, Y+1	; 0x01
     33a:	fa 81       	ldd	r31, Y+2	; 0x02
     33c:	10 8e       	std	Z+24, r1	; 0x18
     33e:	17 8a       	std	Z+23, r1	; 0x17
		Link -> Prev = Last;
     340:	80 91 8c 00 	lds	r24, 0x008C
     344:	90 91 8d 00 	lds	r25, 0x008D
     348:	e9 81       	ldd	r30, Y+1	; 0x01
     34a:	fa 81       	ldd	r31, Y+2	; 0x02
     34c:	92 8f       	std	Z+26, r25	; 0x1a
     34e:	81 8f       	std	Z+25, r24	; 0x19
		Last -> Next = Link;
     350:	e0 91 8c 00 	lds	r30, 0x008C
     354:	f0 91 8d 00 	lds	r31, 0x008D
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	9a 81       	ldd	r25, Y+2	; 0x02
     35c:	90 8f       	std	Z+24, r25	; 0x18
     35e:	87 8b       	std	Z+23, r24	; 0x17

		Last = Link;
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	9a 81       	ldd	r25, Y+2	; 0x02
     364:	90 93 8d 00 	sts	0x008D, r25
     368:	80 93 8c 00 	sts	0x008C, r24
		Counter++;
     36c:	80 91 86 00 	lds	r24, 0x0086
     370:	90 91 87 00 	lds	r25, 0x0087
     374:	01 96       	adiw	r24, 0x01	; 1
     376:	90 93 87 00 	sts	0x0087, r25
     37a:	80 93 86 00 	sts	0x0086, r24

	}
}
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	cf 91       	pop	r28
     388:	df 91       	pop	r29
     38a:	08 95       	ret

0000038c <OS_voidDeleteAllTasks>:

void OS_voidDeleteAllTasks(void)
{	
     38c:	df 93       	push	r29
     38e:	cf 93       	push	r28
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
	if (Head==NULL)
     394:	80 91 88 00 	lds	r24, 0x0088
     398:	90 91 89 00 	lds	r25, 0x0089
     39c:	00 97       	sbiw	r24, 0x00	; 0
     39e:	99 f1       	breq	.+102    	; 0x406 <OS_voidDeleteAllTasks+0x7a>
	{
	} 
	else 
	{
		Current = Head;
     3a0:	80 91 88 00 	lds	r24, 0x0088
     3a4:	90 91 89 00 	lds	r25, 0x0089
     3a8:	90 93 8b 00 	sts	0x008B, r25
     3ac:	80 93 8a 00 	sts	0x008A, r24
     3b0:	18 c0       	rjmp	.+48     	; 0x3e2 <OS_voidDeleteAllTasks+0x56>
		while(Current != NULL)
		{
			Current = Current -> Next;
     3b2:	e0 91 8a 00 	lds	r30, 0x008A
     3b6:	f0 91 8b 00 	lds	r31, 0x008B
     3ba:	87 89       	ldd	r24, Z+23	; 0x17
     3bc:	90 8d       	ldd	r25, Z+24	; 0x18
     3be:	90 93 8b 00 	sts	0x008B, r25
     3c2:	80 93 8a 00 	sts	0x008A, r24
			free(Head);
     3c6:	80 91 88 00 	lds	r24, 0x0088
     3ca:	90 91 89 00 	lds	r25, 0x0089
     3ce:	0e 94 c0 0a 	call	0x1580	; 0x1580 <free>
			Head = Current;
     3d2:	80 91 8a 00 	lds	r24, 0x008A
     3d6:	90 91 8b 00 	lds	r25, 0x008B
     3da:	90 93 89 00 	sts	0x0089, r25
     3de:	80 93 88 00 	sts	0x0088, r24
	{
	} 
	else 
	{
		Current = Head;
		while(Current != NULL)
     3e2:	80 91 8a 00 	lds	r24, 0x008A
     3e6:	90 91 8b 00 	lds	r25, 0x008B
     3ea:	00 97       	sbiw	r24, 0x00	; 0
     3ec:	11 f7       	brne	.-60     	; 0x3b2 <OS_voidDeleteAllTasks+0x26>
		{
			Current = Current -> Next;
			free(Head);
			Head = Current;
		}
		Head = NULL;
     3ee:	10 92 89 00 	sts	0x0089, r1
     3f2:	10 92 88 00 	sts	0x0088, r1
		Last = NULL;
     3f6:	10 92 8d 00 	sts	0x008D, r1
     3fa:	10 92 8c 00 	sts	0x008C, r1
		Current = NULL;
     3fe:	10 92 8b 00 	sts	0x008B, r1
     402:	10 92 8a 00 	sts	0x008A, r1
	}
	Counter = 0;
     406:	10 92 87 00 	sts	0x0087, r1
     40a:	10 92 86 00 	sts	0x0086, r1
}
     40e:	cf 91       	pop	r28
     410:	df 91       	pop	r29
     412:	08 95       	ret

00000414 <OS_voidDeleteLastTask>:

void OS_voidDeleteLastTask(void)
{
     414:	df 93       	push	r29
     416:	cf 93       	push	r28
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
	if (Head==NULL)
     41c:	80 91 88 00 	lds	r24, 0x0088
     420:	90 91 89 00 	lds	r25, 0x0089
     424:	00 97       	sbiw	r24, 0x00	; 0
     426:	11 f1       	breq	.+68     	; 0x46c <OS_voidDeleteLastTask+0x58>
	{
	} 
	else 
	{
		Current = Last;
     428:	80 91 8c 00 	lds	r24, 0x008C
     42c:	90 91 8d 00 	lds	r25, 0x008D
     430:	90 93 8b 00 	sts	0x008B, r25
     434:	80 93 8a 00 	sts	0x008A, r24
		Last = Last -> Prev;
     438:	e0 91 8c 00 	lds	r30, 0x008C
     43c:	f0 91 8d 00 	lds	r31, 0x008D
     440:	81 8d       	ldd	r24, Z+25	; 0x19
     442:	92 8d       	ldd	r25, Z+26	; 0x1a
     444:	90 93 8d 00 	sts	0x008D, r25
     448:	80 93 8c 00 	sts	0x008C, r24
		Last -> Next = NULL;
     44c:	e0 91 8c 00 	lds	r30, 0x008C
     450:	f0 91 8d 00 	lds	r31, 0x008D
     454:	10 8e       	std	Z+24, r1	; 0x18
     456:	17 8a       	std	Z+23, r1	; 0x17
		free(Current);
     458:	80 91 8a 00 	lds	r24, 0x008A
     45c:	90 91 8b 00 	lds	r25, 0x008B
     460:	0e 94 c0 0a 	call	0x1580	; 0x1580 <free>
		Current = NULL;
     464:	10 92 8b 00 	sts	0x008B, r1
     468:	10 92 8a 00 	sts	0x008A, r1
	}
	Counter--;
     46c:	80 91 86 00 	lds	r24, 0x0086
     470:	90 91 87 00 	lds	r25, 0x0087
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	90 93 87 00 	sts	0x0087, r25
     47a:	80 93 86 00 	sts	0x0086, r24
}
     47e:	cf 91       	pop	r28
     480:	df 91       	pop	r29
     482:	08 95       	ret

00000484 <OS_StrSearchTaskByID>:


TaskNode * OS_StrSearchTaskByID(u32 NID)
{
     484:	df 93       	push	r29
     486:	cf 93       	push	r28
     488:	00 d0       	rcall	.+0      	; 0x48a <OS_StrSearchTaskByID+0x6>
     48a:	00 d0       	rcall	.+0      	; 0x48c <OS_StrSearchTaskByID+0x8>
     48c:	00 d0       	rcall	.+0      	; 0x48e <OS_StrSearchTaskByID+0xa>
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	69 83       	std	Y+1, r22	; 0x01
     494:	7a 83       	std	Y+2, r23	; 0x02
     496:	8b 83       	std	Y+3, r24	; 0x03
     498:	9c 83       	std	Y+4, r25	; 0x04
	if (Head==NULL)
     49a:	80 91 88 00 	lds	r24, 0x0088
     49e:	90 91 89 00 	lds	r25, 0x0089
     4a2:	00 97       	sbiw	r24, 0x00	; 0
     4a4:	89 f1       	breq	.+98     	; 0x508 <OS_StrSearchTaskByID+0x84>
	{
	} 
	else 
	{
		Current = Head;
     4a6:	80 91 88 00 	lds	r24, 0x0088
     4aa:	90 91 89 00 	lds	r25, 0x0089
     4ae:	90 93 8b 00 	sts	0x008B, r25
     4b2:	80 93 8a 00 	sts	0x008A, r24
     4b6:	22 c0       	rjmp	.+68     	; 0x4fc <OS_StrSearchTaskByID+0x78>
		while(Current != NULL)
		{
			if (Current -> Task.uNID == NID)
     4b8:	e0 91 8a 00 	lds	r30, 0x008A
     4bc:	f0 91 8b 00 	lds	r31, 0x008B
     4c0:	20 81       	ld	r18, Z
     4c2:	31 81       	ldd	r19, Z+1	; 0x01
     4c4:	42 81       	ldd	r20, Z+2	; 0x02
     4c6:	53 81       	ldd	r21, Z+3	; 0x03
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	9a 81       	ldd	r25, Y+2	; 0x02
     4cc:	ab 81       	ldd	r26, Y+3	; 0x03
     4ce:	bc 81       	ldd	r27, Y+4	; 0x04
     4d0:	28 17       	cp	r18, r24
     4d2:	39 07       	cpc	r19, r25
     4d4:	4a 07       	cpc	r20, r26
     4d6:	5b 07       	cpc	r21, r27
     4d8:	39 f4       	brne	.+14     	; 0x4e8 <OS_StrSearchTaskByID+0x64>
			{
				return &(Current -> Task);
     4da:	80 91 8a 00 	lds	r24, 0x008A
     4de:	90 91 8b 00 	lds	r25, 0x008B
     4e2:	9e 83       	std	Y+6, r25	; 0x06
     4e4:	8d 83       	std	Y+5, r24	; 0x05
     4e6:	12 c0       	rjmp	.+36     	; 0x50c <OS_StrSearchTaskByID+0x88>
			}
			Current = Current -> Next;
     4e8:	e0 91 8a 00 	lds	r30, 0x008A
     4ec:	f0 91 8b 00 	lds	r31, 0x008B
     4f0:	87 89       	ldd	r24, Z+23	; 0x17
     4f2:	90 8d       	ldd	r25, Z+24	; 0x18
     4f4:	90 93 8b 00 	sts	0x008B, r25
     4f8:	80 93 8a 00 	sts	0x008A, r24
	{
	} 
	else 
	{
		Current = Head;
		while(Current != NULL)
     4fc:	80 91 8a 00 	lds	r24, 0x008A
     500:	90 91 8b 00 	lds	r25, 0x008B
     504:	00 97       	sbiw	r24, 0x00	; 0
     506:	c1 f6       	brne	.-80     	; 0x4b8 <OS_StrSearchTaskByID+0x34>
		}
		if (Current == NULL)
		{
		}
	}
	return NULL;
     508:	1e 82       	std	Y+6, r1	; 0x06
     50a:	1d 82       	std	Y+5, r1	; 0x05
     50c:	8d 81       	ldd	r24, Y+5	; 0x05
     50e:	9e 81       	ldd	r25, Y+6	; 0x06
}
     510:	26 96       	adiw	r28, 0x06	; 6
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	f8 94       	cli
     516:	de bf       	out	0x3e, r29	; 62
     518:	0f be       	out	0x3f, r0	; 63
     51a:	cd bf       	out	0x3d, r28	; 61
     51c:	cf 91       	pop	r28
     51e:	df 91       	pop	r29
     520:	08 95       	ret

00000522 <OS_voidDeleteTaskNodeAndGoNext>:

node * OS_voidDeleteTaskNodeAndGoNext(node * CurrentNode)
{
     522:	df 93       	push	r29
     524:	cf 93       	push	r28
     526:	00 d0       	rcall	.+0      	; 0x528 <OS_voidDeleteTaskNodeAndGoNext+0x6>
     528:	00 d0       	rcall	.+0      	; 0x52a <OS_voidDeleteTaskNodeAndGoNext+0x8>
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	9c 83       	std	Y+4, r25	; 0x04
     530:	8b 83       	std	Y+3, r24	; 0x03
	node * Local_StrtmpNode;
	if (Head == NULL)
     532:	80 91 88 00 	lds	r24, 0x0088
     536:	90 91 89 00 	lds	r25, 0x0089
     53a:	00 97       	sbiw	r24, 0x00	; 0
     53c:	19 f4       	brne	.+6      	; 0x544 <OS_voidDeleteTaskNodeAndGoNext+0x22>
		CurrentNode = NULL;
     53e:	1c 82       	std	Y+4, r1	; 0x04
     540:	1b 82       	std	Y+3, r1	; 0x03
     542:	21 c0       	rjmp	.+66     	; 0x586 <OS_voidDeleteTaskNodeAndGoNext+0x64>
	else
	{
		Local_StrtmpNode = CurrentNode -> Prev;
     544:	eb 81       	ldd	r30, Y+3	; 0x03
     546:	fc 81       	ldd	r31, Y+4	; 0x04
     548:	81 8d       	ldd	r24, Z+25	; 0x19
     54a:	92 8d       	ldd	r25, Z+26	; 0x1a
     54c:	9a 83       	std	Y+2, r25	; 0x02
     54e:	89 83       	std	Y+1, r24	; 0x01
		Local_StrtmpNode -> Next = CurrentNode -> Next;
     550:	eb 81       	ldd	r30, Y+3	; 0x03
     552:	fc 81       	ldd	r31, Y+4	; 0x04
     554:	87 89       	ldd	r24, Z+23	; 0x17
     556:	90 8d       	ldd	r25, Z+24	; 0x18
     558:	e9 81       	ldd	r30, Y+1	; 0x01
     55a:	fa 81       	ldd	r31, Y+2	; 0x02
     55c:	90 8f       	std	Z+24, r25	; 0x18
     55e:	87 8b       	std	Z+23, r24	; 0x17
		free(CurrentNode);
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	9c 81       	ldd	r25, Y+4	; 0x04
     564:	0e 94 c0 0a 	call	0x1580	; 0x1580 <free>
		CurrentNode = Local_StrtmpNode -> Next;
     568:	e9 81       	ldd	r30, Y+1	; 0x01
     56a:	fa 81       	ldd	r31, Y+2	; 0x02
     56c:	87 89       	ldd	r24, Z+23	; 0x17
     56e:	90 8d       	ldd	r25, Z+24	; 0x18
     570:	9c 83       	std	Y+4, r25	; 0x04
     572:	8b 83       	std	Y+3, r24	; 0x03
		Counter--;
     574:	80 91 86 00 	lds	r24, 0x0086
     578:	90 91 87 00 	lds	r25, 0x0087
     57c:	01 97       	sbiw	r24, 0x01	; 1
     57e:	90 93 87 00 	sts	0x0087, r25
     582:	80 93 86 00 	sts	0x0086, r24
	}
	return CurrentNode;
     586:	8b 81       	ldd	r24, Y+3	; 0x03
     588:	9c 81       	ldd	r25, Y+4	; 0x04
}
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	cf 91       	pop	r28
     594:	df 91       	pop	r29
     596:	08 95       	ret

00000598 <OS_SearchNodeByID_And_Destroy>:

u16 OS_SearchNodeByID_And_Destroy(u32 NID)
{
     598:	df 93       	push	r29
     59a:	cf 93       	push	r28
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	28 97       	sbiw	r28, 0x08	; 8
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	6b 83       	std	Y+3, r22	; 0x03
     5ae:	7c 83       	std	Y+4, r23	; 0x04
     5b0:	8d 83       	std	Y+5, r24	; 0x05
     5b2:	9e 83       	std	Y+6, r25	; 0x06
	node * Tmp_ptr;
	
	if (Head==NULL)
     5b4:	80 91 88 00 	lds	r24, 0x0088
     5b8:	90 91 89 00 	lds	r25, 0x0089
     5bc:	00 97       	sbiw	r24, 0x00	; 0
     5be:	09 f4       	brne	.+2      	; 0x5c2 <OS_SearchNodeByID_And_Destroy+0x2a>
     5c0:	d4 c0       	rjmp	.+424    	; 0x76a <OS_SearchNodeByID_And_Destroy+0x1d2>
	{
	} 
	else 
	{
		Current = Head;
     5c2:	80 91 88 00 	lds	r24, 0x0088
     5c6:	90 91 89 00 	lds	r25, 0x0089
     5ca:	90 93 8b 00 	sts	0x008B, r25
     5ce:	80 93 8a 00 	sts	0x008A, r24
		Tmp_ptr = Head;
     5d2:	80 91 88 00 	lds	r24, 0x0088
     5d6:	90 91 89 00 	lds	r25, 0x0089
     5da:	9a 83       	std	Y+2, r25	; 0x02
     5dc:	89 83       	std	Y+1, r24	; 0x01
     5de:	be c0       	rjmp	.+380    	; 0x75c <OS_SearchNodeByID_And_Destroy+0x1c4>
		while(Current != NULL)
		{
			if (Current -> Task.uNID == NID)
     5e0:	e0 91 8a 00 	lds	r30, 0x008A
     5e4:	f0 91 8b 00 	lds	r31, 0x008B
     5e8:	20 81       	ld	r18, Z
     5ea:	31 81       	ldd	r19, Z+1	; 0x01
     5ec:	42 81       	ldd	r20, Z+2	; 0x02
     5ee:	53 81       	ldd	r21, Z+3	; 0x03
     5f0:	8b 81       	ldd	r24, Y+3	; 0x03
     5f2:	9c 81       	ldd	r25, Y+4	; 0x04
     5f4:	ad 81       	ldd	r26, Y+5	; 0x05
     5f6:	be 81       	ldd	r27, Y+6	; 0x06
     5f8:	28 17       	cp	r18, r24
     5fa:	39 07       	cpc	r19, r25
     5fc:	4a 07       	cpc	r20, r26
     5fe:	5b 07       	cpc	r21, r27
     600:	09 f0       	breq	.+2      	; 0x604 <OS_SearchNodeByID_And_Destroy+0x6c>
     602:	91 c0       	rjmp	.+290    	; 0x726 <OS_SearchNodeByID_And_Destroy+0x18e>
			{
				if(Current == Head)
     604:	20 91 8a 00 	lds	r18, 0x008A
     608:	30 91 8b 00 	lds	r19, 0x008B
     60c:	80 91 88 00 	lds	r24, 0x0088
     610:	90 91 89 00 	lds	r25, 0x0089
     614:	28 17       	cp	r18, r24
     616:	39 07       	cpc	r19, r25
     618:	41 f5       	brne	.+80     	; 0x66a <OS_SearchNodeByID_And_Destroy+0xd2>
				{
					Head = Head -> Next;
     61a:	e0 91 88 00 	lds	r30, 0x0088
     61e:	f0 91 89 00 	lds	r31, 0x0089
     622:	87 89       	ldd	r24, Z+23	; 0x17
     624:	90 8d       	ldd	r25, Z+24	; 0x18
     626:	90 93 89 00 	sts	0x0089, r25
     62a:	80 93 88 00 	sts	0x0088, r24
					Head -> Prev = NULL;
     62e:	e0 91 88 00 	lds	r30, 0x0088
     632:	f0 91 89 00 	lds	r31, 0x0089
     636:	12 8e       	std	Z+26, r1	; 0x1a
     638:	11 8e       	std	Z+25, r1	; 0x19
					free(Current);
     63a:	80 91 8a 00 	lds	r24, 0x008A
     63e:	90 91 8b 00 	lds	r25, 0x008B
     642:	0e 94 c0 0a 	call	0x1580	; 0x1580 <free>
					Current = NULL;
     646:	10 92 8b 00 	sts	0x008B, r1
     64a:	10 92 8a 00 	sts	0x008A, r1
					Counter--;
     64e:	80 91 86 00 	lds	r24, 0x0086
     652:	90 91 87 00 	lds	r25, 0x0087
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	90 93 87 00 	sts	0x0087, r25
     65c:	80 93 86 00 	sts	0x0086, r24
					return 1;
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	98 87       	std	Y+8, r25	; 0x08
     666:	8f 83       	std	Y+7, r24	; 0x07
     668:	82 c0       	rjmp	.+260    	; 0x76e <OS_SearchNodeByID_And_Destroy+0x1d6>
				}
				else if (Current == Last)
     66a:	20 91 8a 00 	lds	r18, 0x008A
     66e:	30 91 8b 00 	lds	r19, 0x008B
     672:	80 91 8c 00 	lds	r24, 0x008C
     676:	90 91 8d 00 	lds	r25, 0x008D
     67a:	28 17       	cp	r18, r24
     67c:	39 07       	cpc	r19, r25
     67e:	41 f5       	brne	.+80     	; 0x6d0 <OS_SearchNodeByID_And_Destroy+0x138>
				{
					Last = Last -> Prev;
     680:	e0 91 8c 00 	lds	r30, 0x008C
     684:	f0 91 8d 00 	lds	r31, 0x008D
     688:	81 8d       	ldd	r24, Z+25	; 0x19
     68a:	92 8d       	ldd	r25, Z+26	; 0x1a
     68c:	90 93 8d 00 	sts	0x008D, r25
     690:	80 93 8c 00 	sts	0x008C, r24
					Last -> Next = NULL;
     694:	e0 91 8c 00 	lds	r30, 0x008C
     698:	f0 91 8d 00 	lds	r31, 0x008D
     69c:	10 8e       	std	Z+24, r1	; 0x18
     69e:	17 8a       	std	Z+23, r1	; 0x17
					free(Current);
     6a0:	80 91 8a 00 	lds	r24, 0x008A
     6a4:	90 91 8b 00 	lds	r25, 0x008B
     6a8:	0e 94 c0 0a 	call	0x1580	; 0x1580 <free>
					Current = NULL;
     6ac:	10 92 8b 00 	sts	0x008B, r1
     6b0:	10 92 8a 00 	sts	0x008A, r1
					Counter--;
     6b4:	80 91 86 00 	lds	r24, 0x0086
     6b8:	90 91 87 00 	lds	r25, 0x0087
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	90 93 87 00 	sts	0x0087, r25
     6c2:	80 93 86 00 	sts	0x0086, r24
					return 1;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	98 87       	std	Y+8, r25	; 0x08
     6cc:	8f 83       	std	Y+7, r24	; 0x07
     6ce:	4f c0       	rjmp	.+158    	; 0x76e <OS_SearchNodeByID_And_Destroy+0x1d6>
				}					
				else
				{
					Tmp_ptr -> Next = Current -> Next;
     6d0:	e0 91 8a 00 	lds	r30, 0x008A
     6d4:	f0 91 8b 00 	lds	r31, 0x008B
     6d8:	87 89       	ldd	r24, Z+23	; 0x17
     6da:	90 8d       	ldd	r25, Z+24	; 0x18
     6dc:	e9 81       	ldd	r30, Y+1	; 0x01
     6de:	fa 81       	ldd	r31, Y+2	; 0x02
     6e0:	90 8f       	std	Z+24, r25	; 0x18
     6e2:	87 8b       	std	Z+23, r24	; 0x17
					Tmp_ptr -> Next -> Prev = Tmp_ptr;
     6e4:	e9 81       	ldd	r30, Y+1	; 0x01
     6e6:	fa 81       	ldd	r31, Y+2	; 0x02
     6e8:	07 88       	ldd	r0, Z+23	; 0x17
     6ea:	f0 8d       	ldd	r31, Z+24	; 0x18
     6ec:	e0 2d       	mov	r30, r0
     6ee:	89 81       	ldd	r24, Y+1	; 0x01
     6f0:	9a 81       	ldd	r25, Y+2	; 0x02
     6f2:	92 8f       	std	Z+26, r25	; 0x1a
     6f4:	81 8f       	std	Z+25, r24	; 0x19
					free(Current);
     6f6:	80 91 8a 00 	lds	r24, 0x008A
     6fa:	90 91 8b 00 	lds	r25, 0x008B
     6fe:	0e 94 c0 0a 	call	0x1580	; 0x1580 <free>
					Current = NULL;
     702:	10 92 8b 00 	sts	0x008B, r1
     706:	10 92 8a 00 	sts	0x008A, r1
					Counter--;
     70a:	80 91 86 00 	lds	r24, 0x0086
     70e:	90 91 87 00 	lds	r25, 0x0087
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	90 93 87 00 	sts	0x0087, r25
     718:	80 93 86 00 	sts	0x0086, r24
					return 1;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	98 87       	std	Y+8, r25	; 0x08
     722:	8f 83       	std	Y+7, r24	; 0x07
     724:	24 c0       	rjmp	.+72     	; 0x76e <OS_SearchNodeByID_And_Destroy+0x1d6>
				}				
			}
			if(Current != Head)
     726:	20 91 8a 00 	lds	r18, 0x008A
     72a:	30 91 8b 00 	lds	r19, 0x008B
     72e:	80 91 88 00 	lds	r24, 0x0088
     732:	90 91 89 00 	lds	r25, 0x0089
     736:	28 17       	cp	r18, r24
     738:	39 07       	cpc	r19, r25
     73a:	31 f0       	breq	.+12     	; 0x748 <OS_SearchNodeByID_And_Destroy+0x1b0>
			{
				Tmp_ptr = Tmp_ptr -> Next;
     73c:	e9 81       	ldd	r30, Y+1	; 0x01
     73e:	fa 81       	ldd	r31, Y+2	; 0x02
     740:	87 89       	ldd	r24, Z+23	; 0x17
     742:	90 8d       	ldd	r25, Z+24	; 0x18
     744:	9a 83       	std	Y+2, r25	; 0x02
     746:	89 83       	std	Y+1, r24	; 0x01
			}
			Current = Current -> Next;
     748:	e0 91 8a 00 	lds	r30, 0x008A
     74c:	f0 91 8b 00 	lds	r31, 0x008B
     750:	87 89       	ldd	r24, Z+23	; 0x17
     752:	90 8d       	ldd	r25, Z+24	; 0x18
     754:	90 93 8b 00 	sts	0x008B, r25
     758:	80 93 8a 00 	sts	0x008A, r24
	} 
	else 
	{
		Current = Head;
		Tmp_ptr = Head;
		while(Current != NULL)
     75c:	80 91 8a 00 	lds	r24, 0x008A
     760:	90 91 8b 00 	lds	r25, 0x008B
     764:	00 97       	sbiw	r24, 0x00	; 0
     766:	09 f0       	breq	.+2      	; 0x76a <OS_SearchNodeByID_And_Destroy+0x1d2>
     768:	3b cf       	rjmp	.-394    	; 0x5e0 <OS_SearchNodeByID_And_Destroy+0x48>
		if (Current == NULL)
		{
			
		}
	}
	return 0;
     76a:	18 86       	std	Y+8, r1	; 0x08
     76c:	1f 82       	std	Y+7, r1	; 0x07
     76e:	8f 81       	ldd	r24, Y+7	; 0x07
     770:	98 85       	ldd	r25, Y+8	; 0x08
}
     772:	28 96       	adiw	r28, 0x08	; 8
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	f8 94       	cli
     778:	de bf       	out	0x3e, r29	; 62
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	cd bf       	out	0x3d, r28	; 61
     77e:	cf 91       	pop	r28
     780:	df 91       	pop	r29
     782:	08 95       	ret

00000784 <OS_voidBubbleSort>:


void OS_voidBubbleSort(void)
{
     784:	df 93       	push	r29
     786:	cf 93       	push	r28
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
     78c:	6b 97       	sbiw	r28, 0x1b	; 27
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
     792:	de bf       	out	0x3e, r29	; 62
     794:	0f be       	out	0x3f, r0	; 63
     796:	cd bf       	out	0x3d, r28	; 61
	node* Tmp_ptr;
	TaskNode tmpTask;
	u16 currentCount = 0;
     798:	1a 82       	std	Y+2, r1	; 0x02
     79a:	19 82       	std	Y+1, r1	; 0x01
	
	
	// case of 0 not working for now .
	if (Counter > 1)
     79c:	80 91 86 00 	lds	r24, 0x0086
     7a0:	90 91 87 00 	lds	r25, 0x0087
     7a4:	82 30       	cpi	r24, 0x02	; 2
     7a6:	91 05       	cpc	r25, r1
     7a8:	08 f4       	brcc	.+2      	; 0x7ac <OS_voidBubbleSort+0x28>
     7aa:	4f c1       	rjmp	.+670    	; 0xa4a <__stack+0x1eb>
	{
		Current = Head;
     7ac:	80 91 88 00 	lds	r24, 0x0088
     7b0:	90 91 89 00 	lds	r25, 0x0089
     7b4:	90 93 8b 00 	sts	0x008B, r25
     7b8:	80 93 8a 00 	sts	0x008A, r24
		Tmp_ptr = Head;
     7bc:	80 91 88 00 	lds	r24, 0x0088
     7c0:	90 91 89 00 	lds	r25, 0x0089
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	8b 83       	std	Y+3, r24	; 0x03
     7c8:	30 c1       	rjmp	.+608    	; 0xa2a <__stack+0x1cb>

		while(currentCount < Counter)
		{
			Current = Head;
     7ca:	80 91 88 00 	lds	r24, 0x0088
     7ce:	90 91 89 00 	lds	r25, 0x0089
     7d2:	90 93 8b 00 	sts	0x008B, r25
     7d6:	80 93 8a 00 	sts	0x008A, r24
			Tmp_ptr = Head;
     7da:	80 91 88 00 	lds	r24, 0x0088
     7de:	90 91 89 00 	lds	r25, 0x0089
     7e2:	9c 83       	std	Y+4, r25	; 0x04
     7e4:	8b 83       	std	Y+3, r24	; 0x03
     7e6:	15 c1       	rjmp	.+554    	; 0xa12 <__stack+0x1b3>
			while(Current != NULL)
			{
				if (Current -> Task.periority <  Tmp_ptr -> Task.periority)
     7e8:	e0 91 8a 00 	lds	r30, 0x008A
     7ec:	f0 91 8b 00 	lds	r31, 0x008B
     7f0:	20 85       	ldd	r18, Z+8	; 0x08
     7f2:	31 85       	ldd	r19, Z+9	; 0x09
     7f4:	42 85       	ldd	r20, Z+10	; 0x0a
     7f6:	53 85       	ldd	r21, Z+11	; 0x0b
     7f8:	eb 81       	ldd	r30, Y+3	; 0x03
     7fa:	fc 81       	ldd	r31, Y+4	; 0x04
     7fc:	80 85       	ldd	r24, Z+8	; 0x08
     7fe:	91 85       	ldd	r25, Z+9	; 0x09
     800:	a2 85       	ldd	r26, Z+10	; 0x0a
     802:	b3 85       	ldd	r27, Z+11	; 0x0b
     804:	28 17       	cp	r18, r24
     806:	39 07       	cpc	r19, r25
     808:	4a 07       	cpc	r20, r26
     80a:	5b 07       	cpc	r21, r27
     80c:	08 f0       	brcs	.+2      	; 0x810 <OS_voidBubbleSort+0x8c>
     80e:	e6 c0       	rjmp	.+460    	; 0x9dc <__stack+0x17d>
				{
					tmpTask.uNID = Current -> Task.uNID;
     810:	e0 91 8a 00 	lds	r30, 0x008A
     814:	f0 91 8b 00 	lds	r31, 0x008B
     818:	80 81       	ld	r24, Z
     81a:	91 81       	ldd	r25, Z+1	; 0x01
     81c:	a2 81       	ldd	r26, Z+2	; 0x02
     81e:	b3 81       	ldd	r27, Z+3	; 0x03
     820:	8d 83       	std	Y+5, r24	; 0x05
     822:	9e 83       	std	Y+6, r25	; 0x06
     824:	af 83       	std	Y+7, r26	; 0x07
     826:	b8 87       	std	Y+8, r27	; 0x08
					tmpTask.periodicity = Current -> Task.periodicity;
     828:	e0 91 8a 00 	lds	r30, 0x008A
     82c:	f0 91 8b 00 	lds	r31, 0x008B
     830:	84 81       	ldd	r24, Z+4	; 0x04
     832:	95 81       	ldd	r25, Z+5	; 0x05
     834:	a6 81       	ldd	r26, Z+6	; 0x06
     836:	b7 81       	ldd	r27, Z+7	; 0x07
     838:	89 87       	std	Y+9, r24	; 0x09
     83a:	9a 87       	std	Y+10, r25	; 0x0a
     83c:	ab 87       	std	Y+11, r26	; 0x0b
     83e:	bc 87       	std	Y+12, r27	; 0x0c
					tmpTask.periority = Current -> Task.periority;
     840:	e0 91 8a 00 	lds	r30, 0x008A
     844:	f0 91 8b 00 	lds	r31, 0x008B
     848:	80 85       	ldd	r24, Z+8	; 0x08
     84a:	91 85       	ldd	r25, Z+9	; 0x09
     84c:	a2 85       	ldd	r26, Z+10	; 0x0a
     84e:	b3 85       	ldd	r27, Z+11	; 0x0b
     850:	8d 87       	std	Y+13, r24	; 0x0d
     852:	9e 87       	std	Y+14, r25	; 0x0e
     854:	af 87       	std	Y+15, r26	; 0x0f
     856:	b8 8b       	std	Y+16, r27	; 0x10
					tmpTask.pToTask = Current -> Task.pToTask;
     858:	e0 91 8a 00 	lds	r30, 0x008A
     85c:	f0 91 8b 00 	lds	r31, 0x008B
     860:	85 89       	ldd	r24, Z+21	; 0x15
     862:	96 89       	ldd	r25, Z+22	; 0x16
     864:	9b 8f       	std	Y+27, r25	; 0x1b
     866:	8a 8f       	std	Y+26, r24	; 0x1a
					tmpTask.DesiredDelayTime = Current -> Task.DesiredDelayTime;
     868:	e0 91 8a 00 	lds	r30, 0x008A
     86c:	f0 91 8b 00 	lds	r31, 0x008B
     870:	84 85       	ldd	r24, Z+12	; 0x0c
     872:	95 85       	ldd	r25, Z+13	; 0x0d
     874:	a6 85       	ldd	r26, Z+14	; 0x0e
     876:	b7 85       	ldd	r27, Z+15	; 0x0f
     878:	89 8b       	std	Y+17, r24	; 0x11
     87a:	9a 8b       	std	Y+18, r25	; 0x12
     87c:	ab 8b       	std	Y+19, r26	; 0x13
     87e:	bc 8b       	std	Y+20, r27	; 0x14
					tmpTask.startTime = Current -> Task.startTime;
     880:	e0 91 8a 00 	lds	r30, 0x008A
     884:	f0 91 8b 00 	lds	r31, 0x008B
     888:	80 89       	ldd	r24, Z+16	; 0x10
     88a:	91 89       	ldd	r25, Z+17	; 0x11
     88c:	a2 89       	ldd	r26, Z+18	; 0x12
     88e:	b3 89       	ldd	r27, Z+19	; 0x13
     890:	8d 8b       	std	Y+21, r24	; 0x15
     892:	9e 8b       	std	Y+22, r25	; 0x16
     894:	af 8b       	std	Y+23, r26	; 0x17
     896:	b8 8f       	std	Y+24, r27	; 0x18
					tmpTask.TaskAdd = Current -> Task.TaskAdd;
     898:	e0 91 8a 00 	lds	r30, 0x008A
     89c:	f0 91 8b 00 	lds	r31, 0x008B
     8a0:	84 89       	ldd	r24, Z+20	; 0x14
     8a2:	89 8f       	std	Y+25, r24	; 0x19

					Current -> Task.uNID = Tmp_ptr -> Task.uNID;
     8a4:	20 91 8a 00 	lds	r18, 0x008A
     8a8:	30 91 8b 00 	lds	r19, 0x008B
     8ac:	eb 81       	ldd	r30, Y+3	; 0x03
     8ae:	fc 81       	ldd	r31, Y+4	; 0x04
     8b0:	80 81       	ld	r24, Z
     8b2:	91 81       	ldd	r25, Z+1	; 0x01
     8b4:	a2 81       	ldd	r26, Z+2	; 0x02
     8b6:	b3 81       	ldd	r27, Z+3	; 0x03
     8b8:	f9 01       	movw	r30, r18
     8ba:	80 83       	st	Z, r24
     8bc:	91 83       	std	Z+1, r25	; 0x01
     8be:	a2 83       	std	Z+2, r26	; 0x02
     8c0:	b3 83       	std	Z+3, r27	; 0x03
					Current -> Task.periodicity = Tmp_ptr -> Task.periodicity;
     8c2:	20 91 8a 00 	lds	r18, 0x008A
     8c6:	30 91 8b 00 	lds	r19, 0x008B
     8ca:	eb 81       	ldd	r30, Y+3	; 0x03
     8cc:	fc 81       	ldd	r31, Y+4	; 0x04
     8ce:	84 81       	ldd	r24, Z+4	; 0x04
     8d0:	95 81       	ldd	r25, Z+5	; 0x05
     8d2:	a6 81       	ldd	r26, Z+6	; 0x06
     8d4:	b7 81       	ldd	r27, Z+7	; 0x07
     8d6:	f9 01       	movw	r30, r18
     8d8:	84 83       	std	Z+4, r24	; 0x04
     8da:	95 83       	std	Z+5, r25	; 0x05
     8dc:	a6 83       	std	Z+6, r26	; 0x06
     8de:	b7 83       	std	Z+7, r27	; 0x07
					Current -> Task.periority = Tmp_ptr -> Task.periority;
     8e0:	20 91 8a 00 	lds	r18, 0x008A
     8e4:	30 91 8b 00 	lds	r19, 0x008B
     8e8:	eb 81       	ldd	r30, Y+3	; 0x03
     8ea:	fc 81       	ldd	r31, Y+4	; 0x04
     8ec:	80 85       	ldd	r24, Z+8	; 0x08
     8ee:	91 85       	ldd	r25, Z+9	; 0x09
     8f0:	a2 85       	ldd	r26, Z+10	; 0x0a
     8f2:	b3 85       	ldd	r27, Z+11	; 0x0b
     8f4:	f9 01       	movw	r30, r18
     8f6:	80 87       	std	Z+8, r24	; 0x08
     8f8:	91 87       	std	Z+9, r25	; 0x09
     8fa:	a2 87       	std	Z+10, r26	; 0x0a
     8fc:	b3 87       	std	Z+11, r27	; 0x0b
					Current -> Task.pToTask = Tmp_ptr -> Task.pToTask;
     8fe:	a0 91 8a 00 	lds	r26, 0x008A
     902:	b0 91 8b 00 	lds	r27, 0x008B
     906:	eb 81       	ldd	r30, Y+3	; 0x03
     908:	fc 81       	ldd	r31, Y+4	; 0x04
     90a:	85 89       	ldd	r24, Z+21	; 0x15
     90c:	96 89       	ldd	r25, Z+22	; 0x16
     90e:	56 96       	adiw	r26, 0x16	; 22
     910:	9c 93       	st	X, r25
     912:	8e 93       	st	-X, r24
     914:	55 97       	sbiw	r26, 0x15	; 21
					Current -> Task.DesiredDelayTime = Tmp_ptr -> Task.DesiredDelayTime;
     916:	20 91 8a 00 	lds	r18, 0x008A
     91a:	30 91 8b 00 	lds	r19, 0x008B
     91e:	eb 81       	ldd	r30, Y+3	; 0x03
     920:	fc 81       	ldd	r31, Y+4	; 0x04
     922:	84 85       	ldd	r24, Z+12	; 0x0c
     924:	95 85       	ldd	r25, Z+13	; 0x0d
     926:	a6 85       	ldd	r26, Z+14	; 0x0e
     928:	b7 85       	ldd	r27, Z+15	; 0x0f
     92a:	f9 01       	movw	r30, r18
     92c:	84 87       	std	Z+12, r24	; 0x0c
     92e:	95 87       	std	Z+13, r25	; 0x0d
     930:	a6 87       	std	Z+14, r26	; 0x0e
     932:	b7 87       	std	Z+15, r27	; 0x0f
					Current -> Task.startTime = Tmp_ptr -> Task.startTime;
     934:	20 91 8a 00 	lds	r18, 0x008A
     938:	30 91 8b 00 	lds	r19, 0x008B
     93c:	eb 81       	ldd	r30, Y+3	; 0x03
     93e:	fc 81       	ldd	r31, Y+4	; 0x04
     940:	80 89       	ldd	r24, Z+16	; 0x10
     942:	91 89       	ldd	r25, Z+17	; 0x11
     944:	a2 89       	ldd	r26, Z+18	; 0x12
     946:	b3 89       	ldd	r27, Z+19	; 0x13
     948:	f9 01       	movw	r30, r18
     94a:	80 8b       	std	Z+16, r24	; 0x10
     94c:	91 8b       	std	Z+17, r25	; 0x11
     94e:	a2 8b       	std	Z+18, r26	; 0x12
     950:	b3 8b       	std	Z+19, r27	; 0x13
					Current -> Task.TaskAdd = Tmp_ptr -> Task.TaskAdd;
     952:	a0 91 8a 00 	lds	r26, 0x008A
     956:	b0 91 8b 00 	lds	r27, 0x008B
     95a:	eb 81       	ldd	r30, Y+3	; 0x03
     95c:	fc 81       	ldd	r31, Y+4	; 0x04
     95e:	84 89       	ldd	r24, Z+20	; 0x14
     960:	54 96       	adiw	r26, 0x14	; 20
     962:	8c 93       	st	X, r24
					
					Tmp_ptr -> Task.uNID = tmpTask.uNID;
     964:	8d 81       	ldd	r24, Y+5	; 0x05
     966:	9e 81       	ldd	r25, Y+6	; 0x06
     968:	af 81       	ldd	r26, Y+7	; 0x07
     96a:	b8 85       	ldd	r27, Y+8	; 0x08
     96c:	eb 81       	ldd	r30, Y+3	; 0x03
     96e:	fc 81       	ldd	r31, Y+4	; 0x04
     970:	80 83       	st	Z, r24
     972:	91 83       	std	Z+1, r25	; 0x01
     974:	a2 83       	std	Z+2, r26	; 0x02
     976:	b3 83       	std	Z+3, r27	; 0x03
					Tmp_ptr -> Task.periodicity = tmpTask.periodicity;
     978:	89 85       	ldd	r24, Y+9	; 0x09
     97a:	9a 85       	ldd	r25, Y+10	; 0x0a
     97c:	ab 85       	ldd	r26, Y+11	; 0x0b
     97e:	bc 85       	ldd	r27, Y+12	; 0x0c
     980:	eb 81       	ldd	r30, Y+3	; 0x03
     982:	fc 81       	ldd	r31, Y+4	; 0x04
     984:	84 83       	std	Z+4, r24	; 0x04
     986:	95 83       	std	Z+5, r25	; 0x05
     988:	a6 83       	std	Z+6, r26	; 0x06
     98a:	b7 83       	std	Z+7, r27	; 0x07
					Tmp_ptr -> Task.periority = tmpTask.periority;
     98c:	8d 85       	ldd	r24, Y+13	; 0x0d
     98e:	9e 85       	ldd	r25, Y+14	; 0x0e
     990:	af 85       	ldd	r26, Y+15	; 0x0f
     992:	b8 89       	ldd	r27, Y+16	; 0x10
     994:	eb 81       	ldd	r30, Y+3	; 0x03
     996:	fc 81       	ldd	r31, Y+4	; 0x04
     998:	80 87       	std	Z+8, r24	; 0x08
     99a:	91 87       	std	Z+9, r25	; 0x09
     99c:	a2 87       	std	Z+10, r26	; 0x0a
     99e:	b3 87       	std	Z+11, r27	; 0x0b
					Tmp_ptr -> Task.pToTask = tmpTask.pToTask;
     9a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9a2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9a4:	eb 81       	ldd	r30, Y+3	; 0x03
     9a6:	fc 81       	ldd	r31, Y+4	; 0x04
     9a8:	96 8b       	std	Z+22, r25	; 0x16
     9aa:	85 8b       	std	Z+21, r24	; 0x15
					Tmp_ptr -> Task.DesiredDelayTime = tmpTask.DesiredDelayTime;
     9ac:	89 89       	ldd	r24, Y+17	; 0x11
     9ae:	9a 89       	ldd	r25, Y+18	; 0x12
     9b0:	ab 89       	ldd	r26, Y+19	; 0x13
     9b2:	bc 89       	ldd	r27, Y+20	; 0x14
     9b4:	eb 81       	ldd	r30, Y+3	; 0x03
     9b6:	fc 81       	ldd	r31, Y+4	; 0x04
     9b8:	84 87       	std	Z+12, r24	; 0x0c
     9ba:	95 87       	std	Z+13, r25	; 0x0d
     9bc:	a6 87       	std	Z+14, r26	; 0x0e
     9be:	b7 87       	std	Z+15, r27	; 0x0f
					Tmp_ptr -> Task.startTime = tmpTask.startTime;
     9c0:	8d 89       	ldd	r24, Y+21	; 0x15
     9c2:	9e 89       	ldd	r25, Y+22	; 0x16
     9c4:	af 89       	ldd	r26, Y+23	; 0x17
     9c6:	b8 8d       	ldd	r27, Y+24	; 0x18
     9c8:	eb 81       	ldd	r30, Y+3	; 0x03
     9ca:	fc 81       	ldd	r31, Y+4	; 0x04
     9cc:	80 8b       	std	Z+16, r24	; 0x10
     9ce:	91 8b       	std	Z+17, r25	; 0x11
     9d0:	a2 8b       	std	Z+18, r26	; 0x12
     9d2:	b3 8b       	std	Z+19, r27	; 0x13
					Tmp_ptr -> Task.TaskAdd = tmpTask.TaskAdd;
     9d4:	89 8d       	ldd	r24, Y+25	; 0x19
     9d6:	eb 81       	ldd	r30, Y+3	; 0x03
     9d8:	fc 81       	ldd	r31, Y+4	; 0x04
     9da:	84 8b       	std	Z+20, r24	; 0x14

				}
				
				if(Current != Head)
     9dc:	20 91 8a 00 	lds	r18, 0x008A
     9e0:	30 91 8b 00 	lds	r19, 0x008B
     9e4:	80 91 88 00 	lds	r24, 0x0088
     9e8:	90 91 89 00 	lds	r25, 0x0089
     9ec:	28 17       	cp	r18, r24
     9ee:	39 07       	cpc	r19, r25
     9f0:	31 f0       	breq	.+12     	; 0x9fe <__stack+0x19f>
				{
					Tmp_ptr = Tmp_ptr -> Next;
     9f2:	eb 81       	ldd	r30, Y+3	; 0x03
     9f4:	fc 81       	ldd	r31, Y+4	; 0x04
     9f6:	87 89       	ldd	r24, Z+23	; 0x17
     9f8:	90 8d       	ldd	r25, Z+24	; 0x18
     9fa:	9c 83       	std	Y+4, r25	; 0x04
     9fc:	8b 83       	std	Y+3, r24	; 0x03
				}
				Current = Current -> Next;
     9fe:	e0 91 8a 00 	lds	r30, 0x008A
     a02:	f0 91 8b 00 	lds	r31, 0x008B
     a06:	87 89       	ldd	r24, Z+23	; 0x17
     a08:	90 8d       	ldd	r25, Z+24	; 0x18
     a0a:	90 93 8b 00 	sts	0x008B, r25
     a0e:	80 93 8a 00 	sts	0x008A, r24

		while(currentCount < Counter)
		{
			Current = Head;
			Tmp_ptr = Head;
			while(Current != NULL)
     a12:	80 91 8a 00 	lds	r24, 0x008A
     a16:	90 91 8b 00 	lds	r25, 0x008B
     a1a:	00 97       	sbiw	r24, 0x00	; 0
     a1c:	09 f0       	breq	.+2      	; 0xa20 <__stack+0x1c1>
     a1e:	e4 ce       	rjmp	.-568    	; 0x7e8 <OS_voidBubbleSort+0x64>
				{
					Tmp_ptr = Tmp_ptr -> Next;
				}
				Current = Current -> Next;
			}
			currentCount++;
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	9a 81       	ldd	r25, Y+2	; 0x02
     a24:	01 96       	adiw	r24, 0x01	; 1
     a26:	9a 83       	std	Y+2, r25	; 0x02
     a28:	89 83       	std	Y+1, r24	; 0x01
	if (Counter > 1)
	{
		Current = Head;
		Tmp_ptr = Head;

		while(currentCount < Counter)
     a2a:	20 91 86 00 	lds	r18, 0x0086
     a2e:	30 91 87 00 	lds	r19, 0x0087
     a32:	89 81       	ldd	r24, Y+1	; 0x01
     a34:	9a 81       	ldd	r25, Y+2	; 0x02
     a36:	82 17       	cp	r24, r18
     a38:	93 07       	cpc	r25, r19
     a3a:	08 f4       	brcc	.+2      	; 0xa3e <__stack+0x1df>
     a3c:	c6 ce       	rjmp	.-628    	; 0x7ca <OS_voidBubbleSort+0x46>
				Current = Current -> Next;
			}
			currentCount++;
			
		}
		Current = NULL;
     a3e:	10 92 8b 00 	sts	0x008B, r1
     a42:	10 92 8a 00 	sts	0x008A, r1
		Tmp_ptr = NULL;
     a46:	1c 82       	std	Y+4, r1	; 0x04
     a48:	1b 82       	std	Y+3, r1	; 0x03
	}
}
     a4a:	6b 96       	adiw	r28, 0x1b	; 27
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
     a56:	cf 91       	pop	r28
     a58:	df 91       	pop	r29
     a5a:	08 95       	ret

00000a5c <OS_GoFirstNode>:
node * OS_GoFirstNode(void)
{
     a5c:	df 93       	push	r29
     a5e:	cf 93       	push	r28
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
	return Head;
     a64:	80 91 88 00 	lds	r24, 0x0088
     a68:	90 91 89 00 	lds	r25, 0x0089
}
     a6c:	cf 91       	pop	r28
     a6e:	df 91       	pop	r29
     a70:	08 95       	ret

00000a72 <OS_GoNextNode>:

node * OS_GoNextNode(node * Copy_StrCurrent)
{
     a72:	df 93       	push	r29
     a74:	cf 93       	push	r28
     a76:	00 d0       	rcall	.+0      	; 0xa78 <OS_GoNextNode+0x6>
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
     a7c:	9a 83       	std	Y+2, r25	; 0x02
     a7e:	89 83       	std	Y+1, r24	; 0x01
	Copy_StrCurrent = (Copy_StrCurrent -> Next);
     a80:	e9 81       	ldd	r30, Y+1	; 0x01
     a82:	fa 81       	ldd	r31, Y+2	; 0x02
     a84:	87 89       	ldd	r24, Z+23	; 0x17
     a86:	90 8d       	ldd	r25, Z+24	; 0x18
     a88:	9a 83       	std	Y+2, r25	; 0x02
     a8a:	89 83       	std	Y+1, r24	; 0x01

	return Copy_StrCurrent;
     a8c:	89 81       	ldd	r24, Y+1	; 0x01
     a8e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	cf 91       	pop	r28
     a96:	df 91       	pop	r29
     a98:	08 95       	ret

00000a9a <OS_GetTasksCount>:

u16 OS_GetTasksCount (void)
{
     a9a:	df 93       	push	r29
     a9c:	cf 93       	push	r28
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
	return Counter;
     aa2:	80 91 86 00 	lds	r24, 0x0086
     aa6:	90 91 87 00 	lds	r25, 0x0087
}
     aaa:	cf 91       	pop	r28
     aac:	df 91       	pop	r29
     aae:	08 95       	ret

00000ab0 <PORT_voidInit>:
 * Description : Set all pins direction.
 * Inputs  :
 * Outputs :
 * */
void PORT_voidInit(void)
{
     ab0:	df 93       	push	r29
     ab2:	cf 93       	push	r28
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
	DDRA = CONC(DIO_PIN_7_DIR,DIO_PIN_6_DIR,DIO_PIN_5_DIR,DIO_PIN_4_DIR,DIO_PIN_3_DIR,DIO_PIN_2_DIR,DIO_PIN_1_DIR,DIO_PIN_0_DIR);
     ab8:	ea e3       	ldi	r30, 0x3A	; 58
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	80 83       	st	Z, r24
	DDRB = CONC(DIO_PIN_15_DIR,DIO_PIN_14_DIR,DIO_PIN_13_DIR,DIO_PIN_12_DIR,DIO_PIN_11_DIR,DIO_PIN_10_DIR,DIO_PIN_9_DIR,DIO_PIN_8_DIR);
     ac0:	e7 e3       	ldi	r30, 0x37	; 55
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	80 83       	st	Z, r24
	DDRC = CONC(DIO_PIN_23_DIR,DIO_PIN_22_DIR,DIO_PIN_21_DIR,DIO_PIN_20_DIR,DIO_PIN_19_DIR,DIO_PIN_18_DIR,DIO_PIN_17_DIR,DIO_PIN_16_DIR);
     ac8:	e4 e3       	ldi	r30, 0x34	; 52
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	8f ef       	ldi	r24, 0xFF	; 255
     ace:	80 83       	st	Z, r24
	DDRD = CONC(DIO_PIN_31_DIR,DIO_PIN_30_DIR,DIO_PIN_29_DIR,DIO_PIN_28_DIR,DIO_PIN_27_DIR,DIO_PIN_26_DIR,DIO_PIN_25_DIR,DIO_PIN_24_DIR);
     ad0:	e1 e3       	ldi	r30, 0x31	; 49
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	8e ef       	ldi	r24, 0xFE	; 254
     ad6:	80 83       	st	Z, r24

	PORTA = CONC(DIO_PIN_7_VALUE,DIO_PIN_6_VALUE,DIO_PIN_5_VALUE,DIO_PIN_4_VALUE,DIO_PIN_3_VALUE,DIO_PIN_2_VALUE,DIO_PIN_1_VALUE,DIO_PIN_0_VALUE);
     ad8:	eb e3       	ldi	r30, 0x3B	; 59
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	8f ef       	ldi	r24, 0xFF	; 255
     ade:	80 83       	st	Z, r24
	PORTB = CONC(DIO_PIN_15_VALUE,DIO_PIN_14_VALUE,DIO_PIN_13_VALUE,DIO_PIN_12_VALUE,DIO_PIN_11_VALUE,DIO_PIN_10_VALUE,DIO_PIN_9_VALUE,DIO_PIN_8_VALUE);
     ae0:	e8 e3       	ldi	r30, 0x38	; 56
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	8f ef       	ldi	r24, 0xFF	; 255
     ae6:	80 83       	st	Z, r24
	PORTC = CONC(DIO_PIN_23_VALUE,DIO_PIN_22_VALUE,DIO_PIN_21_VALUE,DIO_PIN_20_VALUE,DIO_PIN_19_VALUE,DIO_PIN_18_VALUE,DIO_PIN_17_VALUE,DIO_PIN_16_VALUE);
     ae8:	e5 e3       	ldi	r30, 0x35	; 53
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	80 83       	st	Z, r24
	PORTD = CONC(DIO_PIN_31_VALUE,DIO_PIN_30_VALUE,DIO_PIN_29_VALUE,DIO_PIN_28_VALUE,DIO_PIN_27_VALUE,DIO_PIN_26_VALUE,DIO_PIN_25_VALUE,DIO_PIN_24_VALUE);
     af0:	e2 e3       	ldi	r30, 0x32	; 50
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	8e ef       	ldi	r24, 0xFE	; 254
     af6:	80 83       	st	Z, r24
}
     af8:	cf 91       	pop	r28
     afa:	df 91       	pop	r29
     afc:	08 95       	ret

00000afe <DIO_EnuSetPinValue>:
 * Description : Set the desired pin value.
 * Inputs  : [Copy_u8PinNumber-> pin number value = DIO_PIN_(0~31)]   -  [Copy_u8Direction -> pin value = DIO_PIN_LOW/DIO_PIN_HIGH].
 * Outputs : ErrorStatus [ErrorStatus Enum] -> [OK/NOK/OUTOFRANGE].
 * */
ErrorStatus DIO_EnuSetPinValue(u8 Copy_u8PinNumber ,u8 Copy_u8PinValue)
{
     afe:	df 93       	push	r29
     b00:	cf 93       	push	r28
     b02:	00 d0       	rcall	.+0      	; 0xb04 <DIO_EnuSetPinValue+0x6>
     b04:	00 d0       	rcall	.+0      	; 0xb06 <DIO_EnuSetPinValue+0x8>
     b06:	00 d0       	rcall	.+0      	; 0xb08 <DIO_EnuSetPinValue+0xa>
     b08:	cd b7       	in	r28, 0x3d	; 61
     b0a:	de b7       	in	r29, 0x3e	; 62
     b0c:	8b 83       	std	Y+3, r24	; 0x03
     b0e:	6c 83       	std	Y+4, r22	; 0x04
	ErrorStatus Local_EnuError = NOK; //ErrorStatus [ErrorStatus Enum] -> [OK/NOK/OUTOFRANGE].
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortNumber;
	// to ensure that the passed Pin Number value is between [0~31]
	if ((Copy_u8PinNumber >= DIO_PIN_0) && (Copy_u8PinNumber <=DIO_PIN_31))
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	80 32       	cpi	r24, 0x20	; 32
     b18:	08 f0       	brcs	.+2      	; 0xb1c <DIO_EnuSetPinValue+0x1e>
     b1a:	c0 c0       	rjmp	.+384    	; 0xc9c <DIO_EnuSetPinValue+0x19e>
	{
		Local_u8PortNumber = Copy_u8PinNumber/DIO_PORT_PIN_COUNT;
     b1c:	8b 81       	ldd	r24, Y+3	; 0x03
     b1e:	86 95       	lsr	r24
     b20:	86 95       	lsr	r24
     b22:	86 95       	lsr	r24
     b24:	89 83       	std	Y+1, r24	; 0x01
		Copy_u8PinNumber %= DIO_PORT_PIN_COUNT;
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	87 70       	andi	r24, 0x07	; 7
     b2a:	8b 83       	std	Y+3, r24	; 0x03
		// to ensure that the passed Direction value is between [0/1]
		if ((Copy_u8PinValue >= DIO_PIN_LOW) && (Copy_u8PinValue <= DIO_PIN_HIGH))
     b2c:	8c 81       	ldd	r24, Y+4	; 0x04
     b2e:	82 30       	cpi	r24, 0x02	; 2
     b30:	08 f0       	brcs	.+2      	; 0xb34 <DIO_EnuSetPinValue+0x36>
     b32:	b1 c0       	rjmp	.+354    	; 0xc96 <DIO_EnuSetPinValue+0x198>
		{
			//Assign value to the desired pin.
			switch (Local_u8PortNumber)
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	28 2f       	mov	r18, r24
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	3e 83       	std	Y+6, r19	; 0x06
     b3c:	2d 83       	std	Y+5, r18	; 0x05
     b3e:	6d 81       	ldd	r22, Y+5	; 0x05
     b40:	7e 81       	ldd	r23, Y+6	; 0x06
     b42:	61 30       	cpi	r22, 0x01	; 1
     b44:	71 05       	cpc	r23, r1
     b46:	d9 f1       	breq	.+118    	; 0xbbe <DIO_EnuSetPinValue+0xc0>
     b48:	8d 81       	ldd	r24, Y+5	; 0x05
     b4a:	9e 81       	ldd	r25, Y+6	; 0x06
     b4c:	82 30       	cpi	r24, 0x02	; 2
     b4e:	91 05       	cpc	r25, r1
     b50:	34 f4       	brge	.+12     	; 0xb5e <DIO_EnuSetPinValue+0x60>
     b52:	2d 81       	ldd	r18, Y+5	; 0x05
     b54:	3e 81       	ldd	r19, Y+6	; 0x06
     b56:	21 15       	cp	r18, r1
     b58:	31 05       	cpc	r19, r1
     b5a:	71 f0       	breq	.+28     	; 0xb78 <DIO_EnuSetPinValue+0x7a>
     b5c:	99 c0       	rjmp	.+306    	; 0xc90 <DIO_EnuSetPinValue+0x192>
     b5e:	6d 81       	ldd	r22, Y+5	; 0x05
     b60:	7e 81       	ldd	r23, Y+6	; 0x06
     b62:	62 30       	cpi	r22, 0x02	; 2
     b64:	71 05       	cpc	r23, r1
     b66:	09 f4       	brne	.+2      	; 0xb6a <DIO_EnuSetPinValue+0x6c>
     b68:	4d c0       	rjmp	.+154    	; 0xc04 <DIO_EnuSetPinValue+0x106>
     b6a:	8d 81       	ldd	r24, Y+5	; 0x05
     b6c:	9e 81       	ldd	r25, Y+6	; 0x06
     b6e:	83 30       	cpi	r24, 0x03	; 3
     b70:	91 05       	cpc	r25, r1
     b72:	09 f4       	brne	.+2      	; 0xb76 <DIO_EnuSetPinValue+0x78>
     b74:	6a c0       	rjmp	.+212    	; 0xc4a <DIO_EnuSetPinValue+0x14c>
     b76:	8c c0       	rjmp	.+280    	; 0xc90 <DIO_EnuSetPinValue+0x192>
			{
				case DIO_PORTA:
					ASSIGN_BIT(PORTA,Copy_u8PinNumber,Copy_u8PinValue);
     b78:	ab e3       	ldi	r26, 0x3B	; 59
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	eb e3       	ldi	r30, 0x3B	; 59
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	48 2f       	mov	r20, r24
     b84:	8b 81       	ldd	r24, Y+3	; 0x03
     b86:	28 2f       	mov	r18, r24
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <DIO_EnuSetPinValue+0x96>
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	2a 95       	dec	r18
     b96:	e2 f7       	brpl	.-8      	; 0xb90 <DIO_EnuSetPinValue+0x92>
     b98:	80 95       	com	r24
     b9a:	48 23       	and	r20, r24
     b9c:	8c 81       	ldd	r24, Y+4	; 0x04
     b9e:	28 2f       	mov	r18, r24
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	8b 81       	ldd	r24, Y+3	; 0x03
     ba4:	88 2f       	mov	r24, r24
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	b9 01       	movw	r22, r18
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <DIO_EnuSetPinValue+0xb2>
     bac:	66 0f       	add	r22, r22
     bae:	77 1f       	adc	r23, r23
     bb0:	8a 95       	dec	r24
     bb2:	e2 f7       	brpl	.-8      	; 0xbac <DIO_EnuSetPinValue+0xae>
     bb4:	cb 01       	movw	r24, r22
     bb6:	84 2b       	or	r24, r20
     bb8:	8c 93       	st	X, r24
					Local_EnuError = OK;
     bba:	1a 82       	std	Y+2, r1	; 0x02
     bbc:	71 c0       	rjmp	.+226    	; 0xca0 <DIO_EnuSetPinValue+0x1a2>
				break;
				case DIO_PORTB:
					ASSIGN_BIT(PORTB,Copy_u8PinNumber,Copy_u8PinValue);
     bbe:	a8 e3       	ldi	r26, 0x38	; 56
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 e3       	ldi	r30, 0x38	; 56
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	48 2f       	mov	r20, r24
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <DIO_EnuSetPinValue+0xdc>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	2a 95       	dec	r18
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <DIO_EnuSetPinValue+0xd8>
     bde:	80 95       	com	r24
     be0:	48 23       	and	r20, r24
     be2:	8c 81       	ldd	r24, Y+4	; 0x04
     be4:	28 2f       	mov	r18, r24
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	88 2f       	mov	r24, r24
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	b9 01       	movw	r22, r18
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <DIO_EnuSetPinValue+0xf8>
     bf2:	66 0f       	add	r22, r22
     bf4:	77 1f       	adc	r23, r23
     bf6:	8a 95       	dec	r24
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <DIO_EnuSetPinValue+0xf4>
     bfa:	cb 01       	movw	r24, r22
     bfc:	84 2b       	or	r24, r20
     bfe:	8c 93       	st	X, r24
					Local_EnuError = OK;
     c00:	1a 82       	std	Y+2, r1	; 0x02
     c02:	4e c0       	rjmp	.+156    	; 0xca0 <DIO_EnuSetPinValue+0x1a2>
				break;
				case DIO_PORTC:
					ASSIGN_BIT(PORTC,Copy_u8PinNumber,Copy_u8PinValue);
     c04:	a5 e3       	ldi	r26, 0x35	; 53
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e5 e3       	ldi	r30, 0x35	; 53
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	48 2f       	mov	r20, r24
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <DIO_EnuSetPinValue+0x122>
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	2a 95       	dec	r18
     c22:	e2 f7       	brpl	.-8      	; 0xc1c <DIO_EnuSetPinValue+0x11e>
     c24:	80 95       	com	r24
     c26:	48 23       	and	r20, r24
     c28:	8c 81       	ldd	r24, Y+4	; 0x04
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	88 2f       	mov	r24, r24
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	b9 01       	movw	r22, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_EnuSetPinValue+0x13e>
     c38:	66 0f       	add	r22, r22
     c3a:	77 1f       	adc	r23, r23
     c3c:	8a 95       	dec	r24
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_EnuSetPinValue+0x13a>
     c40:	cb 01       	movw	r24, r22
     c42:	84 2b       	or	r24, r20
     c44:	8c 93       	st	X, r24
					Local_EnuError = OK;
     c46:	1a 82       	std	Y+2, r1	; 0x02
     c48:	2b c0       	rjmp	.+86     	; 0xca0 <DIO_EnuSetPinValue+0x1a2>
				break;
				case DIO_PORTD:
					ASSIGN_BIT(PORTD,Copy_u8PinNumber,Copy_u8PinValue);
     c4a:	a2 e3       	ldi	r26, 0x32	; 50
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e2 e3       	ldi	r30, 0x32	; 50
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	48 2f       	mov	r20, r24
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <DIO_EnuSetPinValue+0x168>
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	2a 95       	dec	r18
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <DIO_EnuSetPinValue+0x164>
     c6a:	80 95       	com	r24
     c6c:	48 23       	and	r20, r24
     c6e:	8c 81       	ldd	r24, Y+4	; 0x04
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	88 2f       	mov	r24, r24
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	b9 01       	movw	r22, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <DIO_EnuSetPinValue+0x184>
     c7e:	66 0f       	add	r22, r22
     c80:	77 1f       	adc	r23, r23
     c82:	8a 95       	dec	r24
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <DIO_EnuSetPinValue+0x180>
     c86:	cb 01       	movw	r24, r22
     c88:	84 2b       	or	r24, r20
     c8a:	8c 93       	st	X, r24
					Local_EnuError = OK;
     c8c:	1a 82       	std	Y+2, r1	; 0x02
     c8e:	08 c0       	rjmp	.+16     	; 0xca0 <DIO_EnuSetPinValue+0x1a2>
				break;
				default:
					Local_EnuError = OUTOFRANGE;
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	8a 83       	std	Y+2, r24	; 0x02
     c94:	05 c0       	rjmp	.+10     	; 0xca0 <DIO_EnuSetPinValue+0x1a2>
				break;
			}
		}
		else
		{
			Local_EnuError = OUTOFRANGE;
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	8a 83       	std	Y+2, r24	; 0x02
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <DIO_EnuSetPinValue+0x1a2>
		}

	}
	else
	{
		Local_EnuError = OUTOFRANGE;
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_EnuError;
     ca0:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ca2:	26 96       	adiw	r28, 0x06	; 6
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <DIO_EnuGetPinValue>:
* Description : Get the desired pin value.
* Inputs  :[Copy_u8PinNumber-> pin number value = DIO_PIN_(0~31)] - [* Copy_u8Value used to receive the pin value 0/1]
* Outputs : ErrorStatus [ErrorStatus Enum] -> [OK/NOK/OUTOFRANGE].
* */
ErrorStatus DIO_EnuGetPinValue(u8 Copy_u8PinNumber ,u8 * Copy_Pu8PinValue)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	27 97       	sbiw	r28, 0x07	; 7
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	8b 83       	std	Y+3, r24	; 0x03
     cca:	7d 83       	std	Y+5, r23	; 0x05
     ccc:	6c 83       	std	Y+4, r22	; 0x04
	ErrorStatus Local_EnuError = NOK; //ErrorStatus [ErrorStatus Enum] -> [OK/NOK/OUTOFRANGE].
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortNumber;
	// to ensure that the passed Pin Number value is between [0~31]
	if ((Copy_u8PinNumber >= DIO_PIN_0) && (Copy_u8PinNumber <=DIO_PIN_31))
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	80 32       	cpi	r24, 0x20	; 32
     cd6:	08 f0       	brcs	.+2      	; 0xcda <DIO_EnuGetPinValue+0x26>
     cd8:	88 c0       	rjmp	.+272    	; 0xdea <DIO_EnuGetPinValue+0x136>
	{
		Local_u8PortNumber = Copy_u8PinNumber/DIO_PORT_PIN_COUNT;
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	86 95       	lsr	r24
     cde:	86 95       	lsr	r24
     ce0:	86 95       	lsr	r24
     ce2:	89 83       	std	Y+1, r24	; 0x01
		Copy_u8PinNumber %= DIO_PORT_PIN_COUNT;
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	87 70       	andi	r24, 0x07	; 7
     ce8:	8b 83       	std	Y+3, r24	; 0x03
		// Check if the pointer passed
		if (Copy_Pu8PinValue != NULL_POINTER)
     cea:	8c 81       	ldd	r24, Y+4	; 0x04
     cec:	9d 81       	ldd	r25, Y+5	; 0x05
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <DIO_EnuGetPinValue+0x40>
     cf2:	78 c0       	rjmp	.+240    	; 0xde4 <DIO_EnuGetPinValue+0x130>
		{
			// Get the value of the pin
			switch (Local_u8PortNumber)
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	3f 83       	std	Y+7, r19	; 0x07
     cfc:	2e 83       	std	Y+6, r18	; 0x06
     cfe:	4e 81       	ldd	r20, Y+6	; 0x06
     d00:	5f 81       	ldd	r21, Y+7	; 0x07
     d02:	41 30       	cpi	r20, 0x01	; 1
     d04:	51 05       	cpc	r21, r1
     d06:	61 f1       	breq	.+88     	; 0xd60 <DIO_EnuGetPinValue+0xac>
     d08:	8e 81       	ldd	r24, Y+6	; 0x06
     d0a:	9f 81       	ldd	r25, Y+7	; 0x07
     d0c:	82 30       	cpi	r24, 0x02	; 2
     d0e:	91 05       	cpc	r25, r1
     d10:	34 f4       	brge	.+12     	; 0xd1e <DIO_EnuGetPinValue+0x6a>
     d12:	2e 81       	ldd	r18, Y+6	; 0x06
     d14:	3f 81       	ldd	r19, Y+7	; 0x07
     d16:	21 15       	cp	r18, r1
     d18:	31 05       	cpc	r19, r1
     d1a:	69 f0       	breq	.+26     	; 0xd36 <DIO_EnuGetPinValue+0x82>
     d1c:	60 c0       	rjmp	.+192    	; 0xdde <DIO_EnuGetPinValue+0x12a>
     d1e:	4e 81       	ldd	r20, Y+6	; 0x06
     d20:	5f 81       	ldd	r21, Y+7	; 0x07
     d22:	42 30       	cpi	r20, 0x02	; 2
     d24:	51 05       	cpc	r21, r1
     d26:	89 f1       	breq	.+98     	; 0xd8a <DIO_EnuGetPinValue+0xd6>
     d28:	8e 81       	ldd	r24, Y+6	; 0x06
     d2a:	9f 81       	ldd	r25, Y+7	; 0x07
     d2c:	83 30       	cpi	r24, 0x03	; 3
     d2e:	91 05       	cpc	r25, r1
     d30:	09 f4       	brne	.+2      	; 0xd34 <DIO_EnuGetPinValue+0x80>
     d32:	40 c0       	rjmp	.+128    	; 0xdb4 <DIO_EnuGetPinValue+0x100>
     d34:	54 c0       	rjmp	.+168    	; 0xdde <DIO_EnuGetPinValue+0x12a>
			{
				case DIO_PORTA:
					*Copy_Pu8PinValue = GET_BIT(PINA,Copy_u8PinNumber);
     d36:	e9 e3       	ldi	r30, 0x39	; 57
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	88 2f       	mov	r24, r24
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a9 01       	movw	r20, r18
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <DIO_EnuGetPinValue+0x9a>
     d4a:	55 95       	asr	r21
     d4c:	47 95       	ror	r20
     d4e:	8a 95       	dec	r24
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <DIO_EnuGetPinValue+0x96>
     d52:	ca 01       	movw	r24, r20
     d54:	81 70       	andi	r24, 0x01	; 1
     d56:	ec 81       	ldd	r30, Y+4	; 0x04
     d58:	fd 81       	ldd	r31, Y+5	; 0x05
     d5a:	80 83       	st	Z, r24
					Local_EnuError = OK;
     d5c:	1a 82       	std	Y+2, r1	; 0x02
     d5e:	47 c0       	rjmp	.+142    	; 0xdee <DIO_EnuGetPinValue+0x13a>
				break;
				case DIO_PORTB:
					*Copy_Pu8PinValue = GET_BIT(PINB,Copy_u8PinNumber);
     d60:	e6 e3       	ldi	r30, 0x36	; 54
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	88 2f       	mov	r24, r24
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	a9 01       	movw	r20, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <DIO_EnuGetPinValue+0xc4>
     d74:	55 95       	asr	r21
     d76:	47 95       	ror	r20
     d78:	8a 95       	dec	r24
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <DIO_EnuGetPinValue+0xc0>
     d7c:	ca 01       	movw	r24, r20
     d7e:	81 70       	andi	r24, 0x01	; 1
     d80:	ec 81       	ldd	r30, Y+4	; 0x04
     d82:	fd 81       	ldd	r31, Y+5	; 0x05
     d84:	80 83       	st	Z, r24
					Local_EnuError = OK;
     d86:	1a 82       	std	Y+2, r1	; 0x02
     d88:	32 c0       	rjmp	.+100    	; 0xdee <DIO_EnuGetPinValue+0x13a>
				break;
				case DIO_PORTC:
					*Copy_Pu8PinValue = GET_BIT(PINC,Copy_u8PinNumber);
     d8a:	e3 e3       	ldi	r30, 0x33	; 51
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	a9 01       	movw	r20, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <DIO_EnuGetPinValue+0xee>
     d9e:	55 95       	asr	r21
     da0:	47 95       	ror	r20
     da2:	8a 95       	dec	r24
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <DIO_EnuGetPinValue+0xea>
     da6:	ca 01       	movw	r24, r20
     da8:	81 70       	andi	r24, 0x01	; 1
     daa:	ec 81       	ldd	r30, Y+4	; 0x04
     dac:	fd 81       	ldd	r31, Y+5	; 0x05
     dae:	80 83       	st	Z, r24
					Local_EnuError = OK;
     db0:	1a 82       	std	Y+2, r1	; 0x02
     db2:	1d c0       	rjmp	.+58     	; 0xdee <DIO_EnuGetPinValue+0x13a>
				break;
				case DIO_PORTD:
					*Copy_Pu8PinValue = GET_BIT(PIND,Copy_u8PinNumber);
     db4:	e0 e3       	ldi	r30, 0x30	; 48
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	88 2f       	mov	r24, r24
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	a9 01       	movw	r20, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_EnuGetPinValue+0x118>
     dc8:	55 95       	asr	r21
     dca:	47 95       	ror	r20
     dcc:	8a 95       	dec	r24
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_EnuGetPinValue+0x114>
     dd0:	ca 01       	movw	r24, r20
     dd2:	81 70       	andi	r24, 0x01	; 1
     dd4:	ec 81       	ldd	r30, Y+4	; 0x04
     dd6:	fd 81       	ldd	r31, Y+5	; 0x05
     dd8:	80 83       	st	Z, r24
					Local_EnuError = OK;
     dda:	1a 82       	std	Y+2, r1	; 0x02
     ddc:	08 c0       	rjmp	.+16     	; 0xdee <DIO_EnuGetPinValue+0x13a>
				break;
				default:
					Local_EnuError = OUTOFRANGE;
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	8a 83       	std	Y+2, r24	; 0x02
     de2:	05 c0       	rjmp	.+10     	; 0xdee <DIO_EnuGetPinValue+0x13a>
				break;
			}
		}
		else
		{
			Local_EnuError = NULLPOINTER;
     de4:	83 e0       	ldi	r24, 0x03	; 3
     de6:	8a 83       	std	Y+2, r24	; 0x02
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_EnuGetPinValue+0x13a>
		}
	}
	else
	{
		Local_EnuError = OUTOFRANGE;
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_EnuError;
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
}
     df0:	27 96       	adiw	r28, 0x07	; 7
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <OS_voidDelay>:
#include "TIMER_INTERFACE.h"
#include "OS_doubleWayLinkedList.h"

/*	the os delay	*/
void OS_voidDelay(u32 Copy_u32DelayTime,void (*Copy_voidPToTask) (void))
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	6d 97       	sbiw	r28, 0x1d	; 29
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	cd bf       	out	0x3d, r28	; 61
     e16:	68 8f       	std	Y+24, r22	; 0x18
     e18:	79 8f       	std	Y+25, r23	; 0x19
     e1a:	8a 8f       	std	Y+26, r24	; 0x1a
     e1c:	9b 8f       	std	Y+27, r25	; 0x1b
     e1e:	5d 8f       	std	Y+29, r21	; 0x1d
     e20:	4c 8f       	std	Y+28, r20	; 0x1c
	TaskNode Local_StrDelayTask;

	// configure the task as a periodic task to add it.
	Local_StrDelayTask.DesiredDelayTime = Copy_u32DelayTime;
     e22:	88 8d       	ldd	r24, Y+24	; 0x18
     e24:	99 8d       	ldd	r25, Y+25	; 0x19
     e26:	aa 8d       	ldd	r26, Y+26	; 0x1a
     e28:	bb 8d       	ldd	r27, Y+27	; 0x1b
     e2a:	8d 87       	std	Y+13, r24	; 0x0d
     e2c:	9e 87       	std	Y+14, r25	; 0x0e
     e2e:	af 87       	std	Y+15, r26	; 0x0f
     e30:	b8 8b       	std	Y+16, r27	; 0x10
	Local_StrDelayTask.startTime = SCH_u32TimeMS;
     e32:	80 91 a6 00 	lds	r24, 0x00A6
     e36:	90 91 a7 00 	lds	r25, 0x00A7
     e3a:	a0 91 a8 00 	lds	r26, 0x00A8
     e3e:	b0 91 a9 00 	lds	r27, 0x00A9
     e42:	89 8b       	std	Y+17, r24	; 0x11
     e44:	9a 8b       	std	Y+18, r25	; 0x12
     e46:	ab 8b       	std	Y+19, r26	; 0x13
     e48:	bc 8b       	std	Y+20, r27	; 0x14
	Local_StrDelayTask.pToTask = Copy_voidPToTask;
     e4a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e4c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     e4e:	9f 8b       	std	Y+23, r25	; 0x17
     e50:	8e 8b       	std	Y+22, r24	; 0x16
	Local_StrDelayTask.TaskAdd = 0;
     e52:	1d 8a       	std	Y+21, r1	; 0x15

	// add new task to the linked list
	OS_voidNewTask(&Local_StrDelayTask);
     e54:	ce 01       	movw	r24, r28
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	0e 94 49 00 	call	0x92	; 0x92 <OS_voidNewTask>
}
     e5c:	6d 96       	adiw	r28, 0x1d	; 29
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <SCH_voidCreateTask>:

/*	 Used to push the task to the task arrays	*/
void SCH_voidCreateTask(Task * Copy_StrTask)
{
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	69 97       	sbiw	r28, 0x19	; 25
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	99 8f       	std	Y+25, r25	; 0x19
     e84:	88 8f       	std	Y+24, r24	; 0x18
	TaskNode Local_StrTask;

	// configure the task as a periodic task to add it.
	Local_StrTask.periodicity = Copy_StrTask -> Periodicity;
     e86:	e8 8d       	ldd	r30, Y+24	; 0x18
     e88:	f9 8d       	ldd	r31, Y+25	; 0x19
     e8a:	82 81       	ldd	r24, Z+2	; 0x02
     e8c:	93 81       	ldd	r25, Z+3	; 0x03
     e8e:	a4 81       	ldd	r26, Z+4	; 0x04
     e90:	b5 81       	ldd	r27, Z+5	; 0x05
     e92:	8d 83       	std	Y+5, r24	; 0x05
     e94:	9e 83       	std	Y+6, r25	; 0x06
     e96:	af 83       	std	Y+7, r26	; 0x07
     e98:	b8 87       	std	Y+8, r27	; 0x08
	Local_StrTask.periority = Copy_StrTask -> Periority;
     e9a:	e8 8d       	ldd	r30, Y+24	; 0x18
     e9c:	f9 8d       	ldd	r31, Y+25	; 0x19
     e9e:	86 81       	ldd	r24, Z+6	; 0x06
     ea0:	97 81       	ldd	r25, Z+7	; 0x07
     ea2:	a0 85       	ldd	r26, Z+8	; 0x08
     ea4:	b1 85       	ldd	r27, Z+9	; 0x09
     ea6:	89 87       	std	Y+9, r24	; 0x09
     ea8:	9a 87       	std	Y+10, r25	; 0x0a
     eaa:	ab 87       	std	Y+11, r26	; 0x0b
     eac:	bc 87       	std	Y+12, r27	; 0x0c
	Local_StrTask.pToTask = Copy_StrTask -> ptfn;
     eae:	e8 8d       	ldd	r30, Y+24	; 0x18
     eb0:	f9 8d       	ldd	r31, Y+25	; 0x19
     eb2:	80 81       	ld	r24, Z
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	9f 8b       	std	Y+23, r25	; 0x17
     eb8:	8e 8b       	std	Y+22, r24	; 0x16
	Local_StrTask.TaskAdd = 1;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	8d 8b       	std	Y+21, r24	; 0x15

	// add new task to the linked list
	OS_voidNewTask(&Local_StrTask);
     ebe:	ce 01       	movw	r24, r28
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	0e 94 49 00 	call	0x92	; 0x92 <OS_voidNewTask>
}
     ec6:	69 96       	adiw	r28, 0x19	; 25
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <SCH_voidScheduler>:

/*	the scheduler main	*/
void SCH_voidScheduler(void)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	00 d0       	rcall	.+0      	; 0xede <SCH_voidScheduler+0x6>
     ede:	00 d0       	rcall	.+0      	; 0xee0 <SCH_voidScheduler+0x8>
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16Counter;

	node * Local_StrCurrentNode;

	// Go to first task at the linked list
	Local_StrCurrentNode = OS_GoFirstNode();
     ee4:	0e 94 2e 05 	call	0xa5c	; 0xa5c <OS_GoFirstNode>
     ee8:	9a 83       	std	Y+2, r25	; 0x02
     eea:	89 83       	std	Y+1, r24	; 0x01
     eec:	5f c0       	rjmp	.+190    	; 0xfac <SCH_voidScheduler+0xd4>

	// execute the tasks
	while(Local_StrCurrentNode != NULL_POINTER)
	{
		if ((Local_StrCurrentNode -> Task.TaskAdd) == 0)
     eee:	e9 81       	ldd	r30, Y+1	; 0x01
     ef0:	fa 81       	ldd	r31, Y+2	; 0x02
     ef2:	84 89       	ldd	r24, Z+20	; 0x14
     ef4:	88 23       	and	r24, r24
     ef6:	89 f5       	brne	.+98     	; 0xf5a <SCH_voidScheduler+0x82>
		{
			if ((SCH_u32TimeMS - Local_StrCurrentNode -> Task.startTime) == Local_StrCurrentNode -> Task.DesiredDelayTime)
     ef8:	20 91 a6 00 	lds	r18, 0x00A6
     efc:	30 91 a7 00 	lds	r19, 0x00A7
     f00:	40 91 a8 00 	lds	r20, 0x00A8
     f04:	50 91 a9 00 	lds	r21, 0x00A9
     f08:	e9 81       	ldd	r30, Y+1	; 0x01
     f0a:	fa 81       	ldd	r31, Y+2	; 0x02
     f0c:	80 89       	ldd	r24, Z+16	; 0x10
     f0e:	91 89       	ldd	r25, Z+17	; 0x11
     f10:	a2 89       	ldd	r26, Z+18	; 0x12
     f12:	b3 89       	ldd	r27, Z+19	; 0x13
     f14:	28 1b       	sub	r18, r24
     f16:	39 0b       	sbc	r19, r25
     f18:	4a 0b       	sbc	r20, r26
     f1a:	5b 0b       	sbc	r21, r27
     f1c:	e9 81       	ldd	r30, Y+1	; 0x01
     f1e:	fa 81       	ldd	r31, Y+2	; 0x02
     f20:	84 85       	ldd	r24, Z+12	; 0x0c
     f22:	95 85       	ldd	r25, Z+13	; 0x0d
     f24:	a6 85       	ldd	r26, Z+14	; 0x0e
     f26:	b7 85       	ldd	r27, Z+15	; 0x0f
     f28:	28 17       	cp	r18, r24
     f2a:	39 07       	cpc	r19, r25
     f2c:	4a 07       	cpc	r20, r26
     f2e:	5b 07       	cpc	r21, r27
     f30:	69 f4       	brne	.+26     	; 0xf4c <SCH_voidScheduler+0x74>
			{
				// execute the task
				Local_StrCurrentNode -> Task.pToTask();
     f32:	e9 81       	ldd	r30, Y+1	; 0x01
     f34:	fa 81       	ldd	r31, Y+2	; 0x02
     f36:	05 88       	ldd	r0, Z+21	; 0x15
     f38:	f6 89       	ldd	r31, Z+22	; 0x16
     f3a:	e0 2d       	mov	r30, r0
     f3c:	09 95       	icall
				// delete the current node then go next
				Local_StrCurrentNode = OS_voidDeleteTaskNodeAndGoNext(Local_StrCurrentNode);
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	0e 94 91 02 	call	0x522	; 0x522 <OS_voidDeleteTaskNodeAndGoNext>
     f46:	9a 83       	std	Y+2, r25	; 0x02
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	30 c0       	rjmp	.+96     	; 0xfac <SCH_voidScheduler+0xd4>
			}
			else
			{
				// Go to Next task at the linked list
				Local_StrCurrentNode = OS_GoNextNode(Local_StrCurrentNode);
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	9a 81       	ldd	r25, Y+2	; 0x02
     f50:	0e 94 39 05 	call	0xa72	; 0xa72 <OS_GoNextNode>
     f54:	9a 83       	std	Y+2, r25	; 0x02
     f56:	89 83       	std	Y+1, r24	; 0x01
     f58:	29 c0       	rjmp	.+82     	; 0xfac <SCH_voidScheduler+0xd4>
			}
		}
		// check if this task is periodic task or just a delay only
		else if ((Local_StrCurrentNode -> Task.TaskAdd) == 1)
     f5a:	e9 81       	ldd	r30, Y+1	; 0x01
     f5c:	fa 81       	ldd	r31, Y+2	; 0x02
     f5e:	84 89       	ldd	r24, Z+20	; 0x14
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	21 f5       	brne	.+72     	; 0xfac <SCH_voidScheduler+0xd4>
		{
			if( (SCH_u32TimeMS % Local_StrCurrentNode -> Task.periodicity) == 0)
     f64:	80 91 a6 00 	lds	r24, 0x00A6
     f68:	90 91 a7 00 	lds	r25, 0x00A7
     f6c:	a0 91 a8 00 	lds	r26, 0x00A8
     f70:	b0 91 a9 00 	lds	r27, 0x00A9
     f74:	e9 81       	ldd	r30, Y+1	; 0x01
     f76:	fa 81       	ldd	r31, Y+2	; 0x02
     f78:	24 81       	ldd	r18, Z+4	; 0x04
     f7a:	35 81       	ldd	r19, Z+5	; 0x05
     f7c:	46 81       	ldd	r20, Z+6	; 0x06
     f7e:	57 81       	ldd	r21, Z+7	; 0x07
     f80:	bc 01       	movw	r22, r24
     f82:	cd 01       	movw	r24, r26
     f84:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__udivmodsi4>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	a1 05       	cpc	r26, r1
     f90:	b1 05       	cpc	r27, r1
     f92:	31 f4       	brne	.+12     	; 0xfa0 <SCH_voidScheduler+0xc8>
			{
				// execute the task
				Local_StrCurrentNode -> Task.pToTask();
     f94:	e9 81       	ldd	r30, Y+1	; 0x01
     f96:	fa 81       	ldd	r31, Y+2	; 0x02
     f98:	05 88       	ldd	r0, Z+21	; 0x15
     f9a:	f6 89       	ldd	r31, Z+22	; 0x16
     f9c:	e0 2d       	mov	r30, r0
     f9e:	09 95       	icall
			}
			// Go to Next task at the linked list
			Local_StrCurrentNode = OS_GoNextNode(Local_StrCurrentNode);
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	0e 94 39 05 	call	0xa72	; 0xa72 <OS_GoNextNode>
     fa8:	9a 83       	std	Y+2, r25	; 0x02
     faa:	89 83       	std	Y+1, r24	; 0x01

	// Go to first task at the linked list
	Local_StrCurrentNode = OS_GoFirstNode();

	// execute the tasks
	while(Local_StrCurrentNode != NULL_POINTER)
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <SCH_voidScheduler+0xde>
     fb4:	9c cf       	rjmp	.-200    	; 0xeee <SCH_voidScheduler+0x16>
			// Go to Next task at the linked list
			Local_StrCurrentNode = OS_GoNextNode(Local_StrCurrentNode);
		}
	}

}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <SCH_voidStart>:

void SCH_voidStart(void)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
	OS_voidBubbleSort();
     fcc:	0e 94 c2 03 	call	0x784	; 0x784 <OS_voidBubbleSort>
	while(1)
	{
		if (SCH_u8TimeFlag == 1)
     fd0:	80 91 aa 00 	lds	r24, 0x00AA
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <SCH_voidStart+0xc>
		{
			SCH_voidScheduler();
     fd8:	0e 94 6c 07 	call	0xed8	; 0xed8 <SCH_voidScheduler>
			SCH_u8TimeFlag = 0;
     fdc:	10 92 aa 00 	sts	0x00AA, r1
     fe0:	f7 cf       	rjmp	.-18     	; 0xfd0 <SCH_voidStart+0xc>

00000fe2 <SCH_void1msCallBack>:
		}
	}
}
void SCH_void1msCallBack(void)
{
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62

	SCH_u32TimeMS++;
     ff2:	80 91 a6 00 	lds	r24, 0x00A6
     ff6:	90 91 a7 00 	lds	r25, 0x00A7
     ffa:	a0 91 a8 00 	lds	r26, 0x00A8
     ffe:	b0 91 a9 00 	lds	r27, 0x00A9
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	a1 1d       	adc	r26, r1
    1006:	b1 1d       	adc	r27, r1
    1008:	80 93 a6 00 	sts	0x00A6, r24
    100c:	90 93 a7 00 	sts	0x00A7, r25
    1010:	a0 93 a8 00 	sts	0x00A8, r26
    1014:	b0 93 a9 00 	sts	0x00A9, r27

	if ((SCH_u32TimeMS%SCH_u16TickTime) == 0)
    1018:	e0 90 a6 00 	lds	r14, 0x00A6
    101c:	f0 90 a7 00 	lds	r15, 0x00A7
    1020:	00 91 a8 00 	lds	r16, 0x00A8
    1024:	10 91 a9 00 	lds	r17, 0x00A9
    1028:	80 91 66 00 	lds	r24, 0x0066
    102c:	90 91 67 00 	lds	r25, 0x0067
    1030:	9c 01       	movw	r18, r24
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	c8 01       	movw	r24, r16
    1038:	b7 01       	movw	r22, r14
    103a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__udivmodsi4>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	a1 05       	cpc	r26, r1
    1046:	b1 05       	cpc	r27, r1
    1048:	19 f4       	brne	.+6      	; 0x1050 <SCH_void1msCallBack+0x6e>
	{
		SCH_u8TimeFlag = 1;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	80 93 aa 00 	sts	0x00AA, r24
	}
}
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	ff 90       	pop	r15
    105a:	ef 90       	pop	r14
    105c:	08 95       	ret

0000105e <SCH_voidInit>:



void SCH_voidInit(void)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
	TIMER0_voidCallBack0(SCH_void1msCallBack);
    1066:	81 ef       	ldi	r24, 0xF1	; 241
    1068:	97 e0       	ldi	r25, 0x07	; 7
    106a:	0e 94 a7 08 	call	0x114e	; 0x114e <TIMER0_voidCallBack0>
}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <TIMER0_EnuInit>:
#include "TIMER_CONFIGURATION.h"


#if TIMER0_ACTIVE == PRIVATE_ENABLE 	/*active timer0*/
ErrorStatus TIMER0_EnuInit(void) 		/*init timer0*/
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	0f 92       	push	r0
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus local_EnuStatus = OK ;
    107e:	19 82       	std	Y+1, r1	; 0x01
	local_EnuStatus = notok ;
#endif


#elif TIMER0_OPERTION_SELECT ==	PRIVATE_CTC_MODE	/*select CTC mode*/
	CLR_BIT(TCCR0,TCCR0_WGM00);
    1080:	a3 e5       	ldi	r26, 0x53	; 83
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e3 e5       	ldi	r30, 0x53	; 83
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	8f 7b       	andi	r24, 0xBF	; 191
    108c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    108e:	a3 e5       	ldi	r26, 0x53	; 83
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e3 e5       	ldi	r30, 0x53	; 83
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	88 60       	ori	r24, 0x08	; 8
    109a:	8c 93       	st	X, r24

#if	TIMER0_COMPARE_MATCH_OUT_PUT_MODE == PRIVATE_OCN_SET             	/*SET MODE*/
	SET_BIT(TCCR0,TCCR0_COM00);
    109c:	a3 e5       	ldi	r26, 0x53	; 83
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e3 e5       	ldi	r30, 0x53	; 83
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	80 61       	ori	r24, 0x10	; 16
    10a8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_COM01);
    10aa:	a3 e5       	ldi	r26, 0x53	; 83
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e3 e5       	ldi	r30, 0x53	; 83
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	80 62       	ori	r24, 0x20	; 32
    10b6:	8c 93       	st	X, r24
#elif TIMER0_Clock_Select == PRIVATE_NO_PRESCALING_TIMER /*no prescaller*/
	SET_BIT(TCCR0,TCCR0_CS00);
	CLR_BIT(TCCR0,TCCR0_CS01);
	CLR_BIT(TCCR0,TCCR0_CS02);
#elif TIMER0_Clock_Select == PRIVATE_CLOCK_8_TIMER /*prescaller8*/
	CLR_BIT(TCCR0,TCCR0_CS00);
    10b8:	a3 e5       	ldi	r26, 0x53	; 83
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e3 e5       	ldi	r30, 0x53	; 83
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	8e 7f       	andi	r24, 0xFE	; 254
    10c4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    10c6:	a3 e5       	ldi	r26, 0x53	; 83
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e3 e5       	ldi	r30, 0x53	; 83
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	82 60       	ori	r24, 0x02	; 2
    10d2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    10d4:	a3 e5       	ldi	r26, 0x53	; 83
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e3 e5       	ldi	r30, 0x53	; 83
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	8b 7f       	andi	r24, 0xFB	; 251
    10e0:	8c 93       	st	X, r24

	/*enable or disable interrupt*/
#if TIMER0_INTERRUPT_ENABLE == PRIVATE_NORMAL_MODE /*enable interrupt*/
	SET_BIT(TIMSK,TIMSK_TOIE0);
#elif TIMER0_INTERRUPT_ENABLE == PRIVATE_CTC_MODE /*enable interrupt*/
	SET_BIT(TIMSK,TIMSK_OCIE0);
    10e2:	a9 e5       	ldi	r26, 0x59	; 89
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e9 e5       	ldi	r30, 0x59	; 89
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	82 60       	ori	r24, 0x02	; 2
    10ee:	8c 93       	st	X, r24
#else
	local_EnuStatus  = notok;/*else it will return not ok*/
#endif

	return local_EnuStatus;
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10f2:	0f 90       	pop	r0
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	08 95       	ret

000010fa <TIMER0_voidSetTimer0_TCNTO>:


/***************************************************/
void TIMER0_voidSetTimer0_TCNTO(u8 copy_u8Tcnt0Value)
{
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	0f 92       	push	r0
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = copy_u8Tcnt0Value ;
    1106:	e2 e5       	ldi	r30, 0x52	; 82
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	80 83       	st	Z, r24
}
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <TIMER0_voidSetTimer0OCR0>:
void TIMER0_voidSetTimer0OCR0(u8 copy_u8Ocr0Value)
{
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	0f 92       	push	r0
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = copy_u8Ocr0Value;
    1122:	ec e5       	ldi	r30, 0x5C	; 92
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	80 83       	st	Z, r24
}
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <TIMER0_voidStop>:

extern void TIMER0_voidStop(void) /*TO STOP TIMER0*/
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TOIE0);
    113a:	a9 e5       	ldi	r26, 0x59	; 89
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e9 e5       	ldi	r30, 0x59	; 89
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	8e 7f       	andi	r24, 0xFE	; 254
    1146:	8c 93       	st	X, r24
}
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <TIMER0_voidCallBack0>:
}
#endif

#if TIMER0_INTERRUPT_ENABLE == PRIVATE_CTC_MODE
extern void TIMER0_voidCallBack0(void (*copy_PvoidPointer)(void))
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <TIMER0_voidCallBack0+0x6>
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	89 83       	std	Y+1, r24	; 0x01
	private_PvoidPointerToAppOfOv0Isr = copy_PvoidPointer ;
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	90 93 b4 00 	sts	0x00B4, r25
    1164:	80 93 b3 00 	sts	0x00B3, r24
}
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <__vector_10>:
void __vector_10 (void)
{
    1172:	1f 92       	push	r1
    1174:	0f 92       	push	r0
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	0f 92       	push	r0
    117a:	11 24       	eor	r1, r1
    117c:	2f 93       	push	r18
    117e:	3f 93       	push	r19
    1180:	4f 93       	push	r20
    1182:	5f 93       	push	r21
    1184:	6f 93       	push	r22
    1186:	7f 93       	push	r23
    1188:	8f 93       	push	r24
    118a:	9f 93       	push	r25
    118c:	af 93       	push	r26
    118e:	bf 93       	push	r27
    1190:	ef 93       	push	r30
    1192:	ff 93       	push	r31
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Time = 0;

	Local_u8Time++;
    119c:	80 91 ab 00 	lds	r24, 0x00AB
    11a0:	8f 5f       	subi	r24, 0xFF	; 255
    11a2:	80 93 ab 00 	sts	0x00AB, r24
	if (Local_u8Time == 4)
    11a6:	80 91 ab 00 	lds	r24, 0x00AB
    11aa:	84 30       	cpi	r24, 0x04	; 4
    11ac:	39 f4       	brne	.+14     	; 0x11bc <__vector_10+0x4a>
	{
		private_PvoidPointerToAppOfOv0Isr();
    11ae:	e0 91 b3 00 	lds	r30, 0x00B3
    11b2:	f0 91 b4 00 	lds	r31, 0x00B4
    11b6:	09 95       	icall
		Local_u8Time = 0;
    11b8:	10 92 ab 00 	sts	0x00AB, r1
	}


}
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	ff 91       	pop	r31
    11c2:	ef 91       	pop	r30
    11c4:	bf 91       	pop	r27
    11c6:	af 91       	pop	r26
    11c8:	9f 91       	pop	r25
    11ca:	8f 91       	pop	r24
    11cc:	7f 91       	pop	r23
    11ce:	6f 91       	pop	r22
    11d0:	5f 91       	pop	r21
    11d2:	4f 91       	pop	r20
    11d4:	3f 91       	pop	r19
    11d6:	2f 91       	pop	r18
    11d8:	0f 90       	pop	r0
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	0f 90       	pop	r0
    11de:	1f 90       	pop	r1
    11e0:	18 95       	reti

000011e2 <TIMER0_voidPwmDutyCycle>:
#endif
extern void TIMER0_voidPwmDutyCycle(u8 copy_u8DutyCycle,u8 copy_u8mode_Inverting_Noninverting)
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <TIMER0_voidPwmDutyCycle+0x6>
    11e8:	0f 92       	push	r0
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	8a 83       	std	Y+2, r24	; 0x02
    11f0:	6b 83       	std	Y+3, r22	; 0x03
	elseif(copy_u8mode_Inverting_Noninverting == TIMER0_INVERTING)
	{
		local_u8Ocr0Value = 255-((copy_u8DutyCycle * TIMER0_TOP)/100) ;
	}
#endif
	TIMER0_voidSetTimer0OCR0(local_u8Ocr0Value);
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	0e 94 8b 08 	call	0x1116	; 0x1116 <TIMER0_voidSetTimer0OCR0>
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <TIMER0_voidDelay>:
/*delay finction with differnt units*/
extern void TIMER0_voidDelay(u16 copy_u16unit_ms_s,u16 copy_u16value)
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	2a 97       	sbiw	r28, 0x0a	; 10
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	98 87       	std	Y+8, r25	; 0x08
    121a:	8f 83       	std	Y+7, r24	; 0x07
    121c:	7a 87       	std	Y+10, r23	; 0x0a
    121e:	69 87       	std	Y+9, r22	; 0x09
	u16 volatile local_u16Counter = 0 ;
    1220:	1a 82       	std	Y+2, r1	; 0x02
    1222:	19 82       	std	Y+1, r1	; 0x01
	u16 volatile local_u16Counter_ticktime = 0 ;
    1224:	1c 82       	std	Y+4, r1	; 0x04
    1226:	1b 82       	std	Y+3, r1	; 0x03
	u16 volatile local_u16Counter_value = 0 ;
    1228:	1e 82       	std	Y+6, r1	; 0x06
    122a:	1d 82       	std	Y+5, r1	; 0x05

	if(copy_u16unit_ms_s ==   TIMER_M_SECOND)
    122c:	8f 81       	ldd	r24, Y+7	; 0x07
    122e:	98 85       	ldd	r25, Y+8	; 0x08
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	91 05       	cpc	r25, r1
    1234:	29 f4       	brne	.+10     	; 0x1240 <TIMER0_voidDelay+0x3c>
	{
		local_u16Counter =(TIMER_CLOCK_SOURCE/1000)/TIMER0_Clock_Select; /*number of overflows to get 1 Milie second*/
    1236:	80 ea       	ldi	r24, 0xA0	; 160
    1238:	9f e0       	ldi	r25, 0x0F	; 15
    123a:	9a 83       	std	Y+2, r25	; 0x02
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <TIMER0_voidDelay+0x4e>
	}
	else if(copy_u16unit_ms_s ==   TIMER_SECOND)
    1240:	8f 81       	ldd	r24, Y+7	; 0x07
    1242:	98 85       	ldd	r25, Y+8	; 0x08
    1244:	82 30       	cpi	r24, 0x02	; 2
    1246:	91 05       	cpc	r25, r1
    1248:	21 f4       	brne	.+8      	; 0x1252 <TIMER0_voidDelay+0x4e>
	{
		local_u16Counter =TIMER_CLOCK_SOURCE/TIMER0_Clock_Select; /*number of overflows to get 1 second*/
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	99 e0       	ldi	r25, 0x09	; 9
    124e:	9a 83       	std	Y+2, r25	; 0x02
    1250:	89 83       	std	Y+1, r24	; 0x01
	}

	for(local_u16Counter_value = TIMER_0_START ; local_u16Counter_value <copy_u16value;local_u16Counter_value++ )
    1252:	1e 82       	std	Y+6, r1	; 0x06
    1254:	1d 82       	std	Y+5, r1	; 0x05
    1256:	26 c0       	rjmp	.+76     	; 0x12a4 <TIMER0_voidDelay+0xa0>
	{

		for(local_u16Counter_ticktime = TIMER_0_START ; local_u16Counter_ticktime <(local_u16Counter/(TIMER0_TOP+1)) ;local_u16Counter_ticktime++ )
    1258:	1c 82       	std	Y+4, r1	; 0x04
    125a:	1b 82       	std	Y+3, r1	; 0x03
    125c:	15 c0       	rjmp	.+42     	; 0x1288 <TIMER0_voidDelay+0x84>
		{

			while(GET_BIT(TIFR,TIFR_TOV0) == 0);
    125e:	e8 e5       	ldi	r30, 0x58	; 88
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	88 2f       	mov	r24, r24
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	81 70       	andi	r24, 0x01	; 1
    126a:	90 70       	andi	r25, 0x00	; 0
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	b9 f3       	breq	.-18     	; 0x125e <TIMER0_voidDelay+0x5a>
			SET_BIT(TIFR,TIFR_TOV0);
    1270:	a8 e5       	ldi	r26, 0x58	; 88
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e8 e5       	ldi	r30, 0x58	; 88
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	81 60       	ori	r24, 0x01	; 1
    127c:	8c 93       	st	X, r24
	}

	for(local_u16Counter_value = TIMER_0_START ; local_u16Counter_value <copy_u16value;local_u16Counter_value++ )
	{

		for(local_u16Counter_ticktime = TIMER_0_START ; local_u16Counter_ticktime <(local_u16Counter/(TIMER0_TOP+1)) ;local_u16Counter_ticktime++ )
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	9c 83       	std	Y+4, r25	; 0x04
    1286:	8b 83       	std	Y+3, r24	; 0x03
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	29 2f       	mov	r18, r25
    128e:	33 27       	eor	r19, r19
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	82 17       	cp	r24, r18
    1296:	93 07       	cpc	r25, r19
    1298:	10 f3       	brcs	.-60     	; 0x125e <TIMER0_voidDelay+0x5a>
	else if(copy_u16unit_ms_s ==   TIMER_SECOND)
	{
		local_u16Counter =TIMER_CLOCK_SOURCE/TIMER0_Clock_Select; /*number of overflows to get 1 second*/
	}

	for(local_u16Counter_value = TIMER_0_START ; local_u16Counter_value <copy_u16value;local_u16Counter_value++ )
    129a:	8d 81       	ldd	r24, Y+5	; 0x05
    129c:	9e 81       	ldd	r25, Y+6	; 0x06
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	9e 83       	std	Y+6, r25	; 0x06
    12a2:	8d 83       	std	Y+5, r24	; 0x05
    12a4:	2d 81       	ldd	r18, Y+5	; 0x05
    12a6:	3e 81       	ldd	r19, Y+6	; 0x06
    12a8:	89 85       	ldd	r24, Y+9	; 0x09
    12aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ac:	28 17       	cp	r18, r24
    12ae:	39 07       	cpc	r19, r25
    12b0:	98 f2       	brcs	.-90     	; 0x1258 <TIMER0_voidDelay+0x54>
			while(GET_BIT(TIFR,TIFR_TOV0) == 0);
			SET_BIT(TIFR,TIFR_TOV0);
		}

	}
}
    12b2:	2a 96       	adiw	r28, 0x0a	; 10
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <led_on_fun>:
#include "TIMER_INTERFACE.h"
#include "SCH_interface.h"
#include "PORT_interface.h"

void led_on_fun(void)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
	static u8 Toggle = 0;

	DIO_EnuSetPinValue(DIO_PIN_31,Toggle);
    12cc:	90 91 ac 00 	lds	r25, 0x00AC
    12d0:	8f e1       	ldi	r24, 0x1F	; 31
    12d2:	69 2f       	mov	r22, r25
    12d4:	0e 94 7f 05 	call	0xafe	; 0xafe <DIO_EnuSetPinValue>
	Toggle = TOGGLE_BIT(Toggle,0);
    12d8:	90 91 ac 00 	lds	r25, 0x00AC
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	89 27       	eor	r24, r25
    12e0:	80 93 ac 00 	sts	0x00AC, r24
    12e4:	80 91 ac 00 	lds	r24, 0x00AC
    12e8:	80 93 ac 00 	sts	0x00AC, r24
}
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <led_on_fun1>:

void led_on_fun1(void)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
	static u8 Toggle = 0;

	DIO_EnuSetPinValue(DIO_PIN_30,Toggle);
    12fa:	90 91 ad 00 	lds	r25, 0x00AD
    12fe:	8e e1       	ldi	r24, 0x1E	; 30
    1300:	69 2f       	mov	r22, r25
    1302:	0e 94 7f 05 	call	0xafe	; 0xafe <DIO_EnuSetPinValue>
	Toggle = TOGGLE_BIT(Toggle,0);
    1306:	90 91 ad 00 	lds	r25, 0x00AD
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	89 27       	eor	r24, r25
    130e:	80 93 ad 00 	sts	0x00AD, r24
    1312:	80 91 ad 00 	lds	r24, 0x00AD
    1316:	80 93 ad 00 	sts	0x00AD, r24
}
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <led_on_fun2>:

void led_on_fun2(void)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
	static u8 Toggle = 0;

	DIO_EnuSetPinValue(DIO_PIN_29,Toggle);
    1328:	90 91 ae 00 	lds	r25, 0x00AE
    132c:	8d e1       	ldi	r24, 0x1D	; 29
    132e:	69 2f       	mov	r22, r25
    1330:	0e 94 7f 05 	call	0xafe	; 0xafe <DIO_EnuSetPinValue>
	Toggle = TOGGLE_BIT(Toggle,0);
    1334:	90 91 ae 00 	lds	r25, 0x00AE
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 27       	eor	r24, r25
    133c:	80 93 ae 00 	sts	0x00AE, r24
    1340:	80 91 ae 00 	lds	r24, 0x00AE
    1344:	80 93 ae 00 	sts	0x00AE, r24
}
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <main>:
		.Periority = 0
};


int main(void)
{
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
	asm("SEI");
    1356:	78 94       	sei

	PORT_voidInit();
    1358:	0e 94 58 05 	call	0xab0	; 0xab0 <PORT_voidInit>
	SCH_voidInit();
    135c:	0e 94 2f 08 	call	0x105e	; 0x105e <SCH_voidInit>

	OS_voidDelay(1000,led_on_fun2);
    1360:	20 e9       	ldi	r18, 0x90	; 144
    1362:	39 e0       	ldi	r19, 0x09	; 9
    1364:	68 ee       	ldi	r22, 0xE8	; 232
    1366:	73 e0       	ldi	r23, 0x03	; 3
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	a9 01       	movw	r20, r18
    136e:	0e 94 01 07 	call	0xe02	; 0xe02 <OS_voidDelay>

	SCH_voidCreateTask(&Led_TOGGLE);
    1372:	88 e6       	ldi	r24, 0x68	; 104
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 37 07 	call	0xe6e	; 0xe6e <SCH_voidCreateTask>

	OS_voidDelay(4000,led_on_fun2);
    137a:	20 e9       	ldi	r18, 0x90	; 144
    137c:	39 e0       	ldi	r19, 0x09	; 9
    137e:	60 ea       	ldi	r22, 0xA0	; 160
    1380:	7f e0       	ldi	r23, 0x0F	; 15
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a9 01       	movw	r20, r18
    1388:	0e 94 01 07 	call	0xe02	; 0xe02 <OS_voidDelay>
	OS_voidDelay(16000,led_on_fun2);
    138c:	20 e9       	ldi	r18, 0x90	; 144
    138e:	39 e0       	ldi	r19, 0x09	; 9
    1390:	60 e8       	ldi	r22, 0x80	; 128
    1392:	7e e3       	ldi	r23, 0x3E	; 62
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a9 01       	movw	r20, r18
    139a:	0e 94 01 07 	call	0xe02	; 0xe02 <OS_voidDelay>
	OS_voidDelay(8000,led_on_fun2);
    139e:	20 e9       	ldi	r18, 0x90	; 144
    13a0:	39 e0       	ldi	r19, 0x09	; 9
    13a2:	60 e4       	ldi	r22, 0x40	; 64
    13a4:	7f e1       	ldi	r23, 0x1F	; 31
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a9 01       	movw	r20, r18
    13ac:	0e 94 01 07 	call	0xe02	; 0xe02 <OS_voidDelay>

	SCH_voidCreateTask(&Led_TOGGLE1);
    13b0:	82 e7       	ldi	r24, 0x72	; 114
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 37 07 	call	0xe6e	; 0xe6e <SCH_voidCreateTask>



	OS_voidDelay(10000,led_on_fun2);
    13b8:	20 e9       	ldi	r18, 0x90	; 144
    13ba:	39 e0       	ldi	r19, 0x09	; 9
    13bc:	60 e1       	ldi	r22, 0x10	; 16
    13be:	77 e2       	ldi	r23, 0x27	; 39
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	a9 01       	movw	r20, r18
    13c6:	0e 94 01 07 	call	0xe02	; 0xe02 <OS_voidDelay>


	TIMER0_voidSetTimer0OCR0(250);
    13ca:	8a ef       	ldi	r24, 0xFA	; 250
    13cc:	0e 94 8b 08 	call	0x1116	; 0x1116 <TIMER0_voidSetTimer0OCR0>

	TIMER0_EnuInit();
    13d0:	0e 94 3a 08 	call	0x1074	; 0x1074 <TIMER0_EnuInit>


	SCH_voidStart();
    13d4:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <SCH_voidStart>


	return 0;
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
}
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <__udivmodsi4>:
    13e2:	a1 e2       	ldi	r26, 0x21	; 33
    13e4:	1a 2e       	mov	r1, r26
    13e6:	aa 1b       	sub	r26, r26
    13e8:	bb 1b       	sub	r27, r27
    13ea:	fd 01       	movw	r30, r26
    13ec:	0d c0       	rjmp	.+26     	; 0x1408 <__udivmodsi4_ep>

000013ee <__udivmodsi4_loop>:
    13ee:	aa 1f       	adc	r26, r26
    13f0:	bb 1f       	adc	r27, r27
    13f2:	ee 1f       	adc	r30, r30
    13f4:	ff 1f       	adc	r31, r31
    13f6:	a2 17       	cp	r26, r18
    13f8:	b3 07       	cpc	r27, r19
    13fa:	e4 07       	cpc	r30, r20
    13fc:	f5 07       	cpc	r31, r21
    13fe:	20 f0       	brcs	.+8      	; 0x1408 <__udivmodsi4_ep>
    1400:	a2 1b       	sub	r26, r18
    1402:	b3 0b       	sbc	r27, r19
    1404:	e4 0b       	sbc	r30, r20
    1406:	f5 0b       	sbc	r31, r21

00001408 <__udivmodsi4_ep>:
    1408:	66 1f       	adc	r22, r22
    140a:	77 1f       	adc	r23, r23
    140c:	88 1f       	adc	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	1a 94       	dec	r1
    1412:	69 f7       	brne	.-38     	; 0x13ee <__udivmodsi4_loop>
    1414:	60 95       	com	r22
    1416:	70 95       	com	r23
    1418:	80 95       	com	r24
    141a:	90 95       	com	r25
    141c:	9b 01       	movw	r18, r22
    141e:	ac 01       	movw	r20, r24
    1420:	bd 01       	movw	r22, r26
    1422:	cf 01       	movw	r24, r30
    1424:	08 95       	ret

00001426 <malloc>:
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	bc 01       	movw	r22, r24
    142c:	82 30       	cpi	r24, 0x02	; 2
    142e:	91 05       	cpc	r25, r1
    1430:	10 f4       	brcc	.+4      	; 0x1436 <malloc+0x10>
    1432:	62 e0       	ldi	r22, 0x02	; 2
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	a0 91 bb 00 	lds	r26, 0x00BB
    143a:	b0 91 bc 00 	lds	r27, 0x00BC
    143e:	ed 01       	movw	r28, r26
    1440:	e0 e0       	ldi	r30, 0x00	; 0
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	40 e0       	ldi	r20, 0x00	; 0
    1446:	50 e0       	ldi	r21, 0x00	; 0
    1448:	21 c0       	rjmp	.+66     	; 0x148c <malloc+0x66>
    144a:	88 81       	ld	r24, Y
    144c:	99 81       	ldd	r25, Y+1	; 0x01
    144e:	86 17       	cp	r24, r22
    1450:	97 07       	cpc	r25, r23
    1452:	69 f4       	brne	.+26     	; 0x146e <malloc+0x48>
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	9b 81       	ldd	r25, Y+3	; 0x03
    1458:	30 97       	sbiw	r30, 0x00	; 0
    145a:	19 f0       	breq	.+6      	; 0x1462 <malloc+0x3c>
    145c:	93 83       	std	Z+3, r25	; 0x03
    145e:	82 83       	std	Z+2, r24	; 0x02
    1460:	04 c0       	rjmp	.+8      	; 0x146a <malloc+0x44>
    1462:	90 93 bc 00 	sts	0x00BC, r25
    1466:	80 93 bb 00 	sts	0x00BB, r24
    146a:	fe 01       	movw	r30, r28
    146c:	34 c0       	rjmp	.+104    	; 0x14d6 <malloc+0xb0>
    146e:	68 17       	cp	r22, r24
    1470:	79 07       	cpc	r23, r25
    1472:	38 f4       	brcc	.+14     	; 0x1482 <malloc+0x5c>
    1474:	41 15       	cp	r20, r1
    1476:	51 05       	cpc	r21, r1
    1478:	19 f0       	breq	.+6      	; 0x1480 <malloc+0x5a>
    147a:	84 17       	cp	r24, r20
    147c:	95 07       	cpc	r25, r21
    147e:	08 f4       	brcc	.+2      	; 0x1482 <malloc+0x5c>
    1480:	ac 01       	movw	r20, r24
    1482:	fe 01       	movw	r30, r28
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	9b 81       	ldd	r25, Y+3	; 0x03
    1488:	9c 01       	movw	r18, r24
    148a:	e9 01       	movw	r28, r18
    148c:	20 97       	sbiw	r28, 0x00	; 0
    148e:	e9 f6       	brne	.-70     	; 0x144a <malloc+0x24>
    1490:	41 15       	cp	r20, r1
    1492:	51 05       	cpc	r21, r1
    1494:	a9 f1       	breq	.+106    	; 0x1500 <malloc+0xda>
    1496:	ca 01       	movw	r24, r20
    1498:	86 1b       	sub	r24, r22
    149a:	97 0b       	sbc	r25, r23
    149c:	04 97       	sbiw	r24, 0x04	; 4
    149e:	08 f4       	brcc	.+2      	; 0x14a2 <malloc+0x7c>
    14a0:	ba 01       	movw	r22, r20
    14a2:	e0 e0       	ldi	r30, 0x00	; 0
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	2a c0       	rjmp	.+84     	; 0x14fc <malloc+0xd6>
    14a8:	8d 91       	ld	r24, X+
    14aa:	9c 91       	ld	r25, X
    14ac:	11 97       	sbiw	r26, 0x01	; 1
    14ae:	84 17       	cp	r24, r20
    14b0:	95 07       	cpc	r25, r21
    14b2:	f9 f4       	brne	.+62     	; 0x14f2 <malloc+0xcc>
    14b4:	64 17       	cp	r22, r20
    14b6:	75 07       	cpc	r23, r21
    14b8:	81 f4       	brne	.+32     	; 0x14da <malloc+0xb4>
    14ba:	12 96       	adiw	r26, 0x02	; 2
    14bc:	8d 91       	ld	r24, X+
    14be:	9c 91       	ld	r25, X
    14c0:	13 97       	sbiw	r26, 0x03	; 3
    14c2:	30 97       	sbiw	r30, 0x00	; 0
    14c4:	19 f0       	breq	.+6      	; 0x14cc <malloc+0xa6>
    14c6:	93 83       	std	Z+3, r25	; 0x03
    14c8:	82 83       	std	Z+2, r24	; 0x02
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <malloc+0xae>
    14cc:	90 93 bc 00 	sts	0x00BC, r25
    14d0:	80 93 bb 00 	sts	0x00BB, r24
    14d4:	fd 01       	movw	r30, r26
    14d6:	32 96       	adiw	r30, 0x02	; 2
    14d8:	4f c0       	rjmp	.+158    	; 0x1578 <malloc+0x152>
    14da:	ca 01       	movw	r24, r20
    14dc:	86 1b       	sub	r24, r22
    14de:	97 0b       	sbc	r25, r23
    14e0:	fd 01       	movw	r30, r26
    14e2:	e8 0f       	add	r30, r24
    14e4:	f9 1f       	adc	r31, r25
    14e6:	61 93       	st	Z+, r22
    14e8:	71 93       	st	Z+, r23
    14ea:	02 97       	sbiw	r24, 0x02	; 2
    14ec:	8d 93       	st	X+, r24
    14ee:	9c 93       	st	X, r25
    14f0:	43 c0       	rjmp	.+134    	; 0x1578 <malloc+0x152>
    14f2:	fd 01       	movw	r30, r26
    14f4:	82 81       	ldd	r24, Z+2	; 0x02
    14f6:	93 81       	ldd	r25, Z+3	; 0x03
    14f8:	9c 01       	movw	r18, r24
    14fa:	d9 01       	movw	r26, r18
    14fc:	10 97       	sbiw	r26, 0x00	; 0
    14fe:	a1 f6       	brne	.-88     	; 0x14a8 <malloc+0x82>
    1500:	80 91 b9 00 	lds	r24, 0x00B9
    1504:	90 91 ba 00 	lds	r25, 0x00BA
    1508:	89 2b       	or	r24, r25
    150a:	41 f4       	brne	.+16     	; 0x151c <malloc+0xf6>
    150c:	80 91 62 00 	lds	r24, 0x0062
    1510:	90 91 63 00 	lds	r25, 0x0063
    1514:	90 93 ba 00 	sts	0x00BA, r25
    1518:	80 93 b9 00 	sts	0x00B9, r24
    151c:	40 91 64 00 	lds	r20, 0x0064
    1520:	50 91 65 00 	lds	r21, 0x0065
    1524:	41 15       	cp	r20, r1
    1526:	51 05       	cpc	r21, r1
    1528:	41 f4       	brne	.+16     	; 0x153a <malloc+0x114>
    152a:	4d b7       	in	r20, 0x3d	; 61
    152c:	5e b7       	in	r21, 0x3e	; 62
    152e:	80 91 60 00 	lds	r24, 0x0060
    1532:	90 91 61 00 	lds	r25, 0x0061
    1536:	48 1b       	sub	r20, r24
    1538:	59 0b       	sbc	r21, r25
    153a:	20 91 b9 00 	lds	r18, 0x00B9
    153e:	30 91 ba 00 	lds	r19, 0x00BA
    1542:	24 17       	cp	r18, r20
    1544:	35 07       	cpc	r19, r21
    1546:	b0 f4       	brcc	.+44     	; 0x1574 <malloc+0x14e>
    1548:	ca 01       	movw	r24, r20
    154a:	82 1b       	sub	r24, r18
    154c:	93 0b       	sbc	r25, r19
    154e:	86 17       	cp	r24, r22
    1550:	97 07       	cpc	r25, r23
    1552:	80 f0       	brcs	.+32     	; 0x1574 <malloc+0x14e>
    1554:	ab 01       	movw	r20, r22
    1556:	4e 5f       	subi	r20, 0xFE	; 254
    1558:	5f 4f       	sbci	r21, 0xFF	; 255
    155a:	84 17       	cp	r24, r20
    155c:	95 07       	cpc	r25, r21
    155e:	50 f0       	brcs	.+20     	; 0x1574 <malloc+0x14e>
    1560:	42 0f       	add	r20, r18
    1562:	53 1f       	adc	r21, r19
    1564:	50 93 ba 00 	sts	0x00BA, r21
    1568:	40 93 b9 00 	sts	0x00B9, r20
    156c:	f9 01       	movw	r30, r18
    156e:	61 93       	st	Z+, r22
    1570:	71 93       	st	Z+, r23
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <malloc+0x152>
    1574:	e0 e0       	ldi	r30, 0x00	; 0
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	cf 01       	movw	r24, r30
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	08 95       	ret

00001580 <free>:
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	09 f4       	brne	.+2      	; 0x158a <free+0xa>
    1588:	50 c0       	rjmp	.+160    	; 0x162a <free+0xaa>
    158a:	ec 01       	movw	r28, r24
    158c:	22 97       	sbiw	r28, 0x02	; 2
    158e:	1b 82       	std	Y+3, r1	; 0x03
    1590:	1a 82       	std	Y+2, r1	; 0x02
    1592:	a0 91 bb 00 	lds	r26, 0x00BB
    1596:	b0 91 bc 00 	lds	r27, 0x00BC
    159a:	10 97       	sbiw	r26, 0x00	; 0
    159c:	09 f1       	breq	.+66     	; 0x15e0 <free+0x60>
    159e:	40 e0       	ldi	r20, 0x00	; 0
    15a0:	50 e0       	ldi	r21, 0x00	; 0
    15a2:	ac 17       	cp	r26, r28
    15a4:	bd 07       	cpc	r27, r29
    15a6:	08 f1       	brcs	.+66     	; 0x15ea <free+0x6a>
    15a8:	bb 83       	std	Y+3, r27	; 0x03
    15aa:	aa 83       	std	Y+2, r26	; 0x02
    15ac:	fe 01       	movw	r30, r28
    15ae:	21 91       	ld	r18, Z+
    15b0:	31 91       	ld	r19, Z+
    15b2:	e2 0f       	add	r30, r18
    15b4:	f3 1f       	adc	r31, r19
    15b6:	ae 17       	cp	r26, r30
    15b8:	bf 07       	cpc	r27, r31
    15ba:	79 f4       	brne	.+30     	; 0x15da <free+0x5a>
    15bc:	8d 91       	ld	r24, X+
    15be:	9c 91       	ld	r25, X
    15c0:	11 97       	sbiw	r26, 0x01	; 1
    15c2:	28 0f       	add	r18, r24
    15c4:	39 1f       	adc	r19, r25
    15c6:	2e 5f       	subi	r18, 0xFE	; 254
    15c8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ca:	39 83       	std	Y+1, r19	; 0x01
    15cc:	28 83       	st	Y, r18
    15ce:	12 96       	adiw	r26, 0x02	; 2
    15d0:	8d 91       	ld	r24, X+
    15d2:	9c 91       	ld	r25, X
    15d4:	13 97       	sbiw	r26, 0x03	; 3
    15d6:	9b 83       	std	Y+3, r25	; 0x03
    15d8:	8a 83       	std	Y+2, r24	; 0x02
    15da:	41 15       	cp	r20, r1
    15dc:	51 05       	cpc	r21, r1
    15de:	71 f4       	brne	.+28     	; 0x15fc <free+0x7c>
    15e0:	d0 93 bc 00 	sts	0x00BC, r29
    15e4:	c0 93 bb 00 	sts	0x00BB, r28
    15e8:	20 c0       	rjmp	.+64     	; 0x162a <free+0xaa>
    15ea:	12 96       	adiw	r26, 0x02	; 2
    15ec:	8d 91       	ld	r24, X+
    15ee:	9c 91       	ld	r25, X
    15f0:	13 97       	sbiw	r26, 0x03	; 3
    15f2:	ad 01       	movw	r20, r26
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	11 f0       	breq	.+4      	; 0x15fc <free+0x7c>
    15f8:	dc 01       	movw	r26, r24
    15fa:	d3 cf       	rjmp	.-90     	; 0x15a2 <free+0x22>
    15fc:	fa 01       	movw	r30, r20
    15fe:	d3 83       	std	Z+3, r29	; 0x03
    1600:	c2 83       	std	Z+2, r28	; 0x02
    1602:	21 91       	ld	r18, Z+
    1604:	31 91       	ld	r19, Z+
    1606:	e2 0f       	add	r30, r18
    1608:	f3 1f       	adc	r31, r19
    160a:	ce 17       	cp	r28, r30
    160c:	df 07       	cpc	r29, r31
    160e:	69 f4       	brne	.+26     	; 0x162a <free+0xaa>
    1610:	88 81       	ld	r24, Y
    1612:	99 81       	ldd	r25, Y+1	; 0x01
    1614:	28 0f       	add	r18, r24
    1616:	39 1f       	adc	r19, r25
    1618:	2e 5f       	subi	r18, 0xFE	; 254
    161a:	3f 4f       	sbci	r19, 0xFF	; 255
    161c:	fa 01       	movw	r30, r20
    161e:	31 83       	std	Z+1, r19	; 0x01
    1620:	20 83       	st	Z, r18
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	9b 81       	ldd	r25, Y+3	; 0x03
    1626:	93 83       	std	Z+3, r25	; 0x03
    1628:	82 83       	std	Z+2, r24	; 0x02
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	08 95       	ret

00001630 <_exit>:
    1630:	f8 94       	cli

00001632 <__stop_program>:
    1632:	ff cf       	rjmp	.-2      	; 0x1632 <__stop_program>
